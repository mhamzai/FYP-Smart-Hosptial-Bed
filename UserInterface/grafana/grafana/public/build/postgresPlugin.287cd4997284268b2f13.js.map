{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query_model.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","length","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","value","flatMap","toArray","map","v","Array","from","Set","options","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","undefined","annotation","time","tags","trim","split","PostgresQueryModel","constructor","target","templateSrv","scopedVars","this","format","timeColumn","metricColumn","group","where","type","params","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","substring","replace","quoteIdentifier","String","quoteLiteral","escapeLiteral","hasTimeGroup","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","windows","func","overParts","over","curr","prev","buildWhereClause","conditions","tag","index","buildGroupClause","groupSection","part","table","PostgresDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","super","id","jsonData","responseParser","queryModel","interval","interpolateVariable","_map","settingsData","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","filterQuery","hide","applyTemplateVariables","refId","datasourceId","Promise","reject","message","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","res","transformAnnotationResponse","toPromise","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","rsp","getVersion","getTimescaleDBVersion","testDatasource","then","status","catch","err","console","error","targetContainsTemplate","variableExists","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","register","SqlPartDef","style","dynamicLookup","defaultParams","label","quote","create","def","SqlPart","PostgresQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","formats","metaBuilder","lastQueryMeta","lastQueryError","showHelp","tableSegment","whereAdd","timeColumnSegment","metricColumnSegment","selectMenu","selectParts","groupParts","whereParts","groupAdd","panel","updateProjection","panelCtrl","result","segment","newSegment","html","updateRawSqlAndRefresh","fake","buildSelectMenu","newPlusButton","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","refresh","sqlPart","filter","n","updatePersistedParts","aggregates","submenu","timescaledb","postgresVersion","aggregates2","toggleEditorMode","appEvents","publish","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","meta","results","queryRes","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","clone","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","templateUrl","PostgresConfigCtrl","datasourceSrv","showTimescaleDBHelp","onPasswordReset","onPasswordChange","postgresVersions","current","ctrl","sslmode","tlsConfigurationMethod","autoDetectFeatures","createResetHandler","PasswordFieldEnum","Password","createChangeHandler","tlsModeMapping","loadDatasource","ds","version","Number","major","trunc","minor","toggleTimescaleDBHelp","tlsAuth","tlsAuthWithCACert","tlsSkipVerify","PostgresAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl","field","event","preventDefault","secureJsonFields","secureJsonData","currentTarget","wrapOpen","wrapClose","separator","toUpperCase","updateParam","strValue","optional"],"mappings":"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","file":"postgresPlugin.287cd4997284268b2f13.js","sourcesContent":["import { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { find, map } from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars } from '@grafana/data';\n\nimport ResponseParser from './response_parser';\nimport PostgresQueryModel from 'app/plugins/datasource/postgres/postgres_query_model';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { PostgresOptions, PostgresQuery, PostgresQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nexport class PostgresDatasource extends DataSourceWithBackend<PostgresQuery, PostgresOptions> {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PostgresOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as PostgresOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[], variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: PostgresQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: PostgresQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new PostgresQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasourceId: this.id,\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n        requestId: options.annotation.name,\n      })\n      .pipe(\n        map(\n          async (res: FetchResponse<BackendDataSourceResponse>) =>\n            await this.responseParser.transformAnnotationResponse(options, res.data)\n        )\n      )\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: range.from.valueOf().toString(),\n          to: range.to.valueOf().toString(),\n          queries: [interpolatedQuery],\n        },\n        requestId: refId,\n      })\n      .pipe(\n        map((rsp) => {\n          return this.responseParser.transformMetricFindResponse(rsp);\n        })\n      )\n      .toPromise();\n  }\n\n  getVersion(): Promise<any> {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion(): Promise<any> {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource(): Promise<any> {\n    return this.metricFindQuery('SELECT 1', {})\n      .then(() => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.error(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query_model';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQueryModel from './postgres_query_model';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  queryModel: PostgresQueryModel;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp = false;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [[]];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any; type: any; fake: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n    button.type = plusButton.type;\n    button.fake = plusButton.fake;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { find } from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  // Set through angular bindings\n  declare current: any;\n\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.current = $scope.ctrl.current;\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.tlsConfigurationMethod = this.current.jsonData.tlsConfigurationMethod || 'file-path';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.tlsModeMapping();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  tlsModeMapping() {\n    if (this.current.jsonData.sslmode === 'disable') {\n      this.current.jsonData.tlsAuth = false;\n      this.current.jsonData.tlsAuthWithCACert = false;\n      this.current.jsonData.tlsSkipVerify = true;\n    } else {\n      this.current.jsonData.tlsAuth = true;\n      this.current.jsonData.tlsAuthWithCACert = true;\n      this.current.jsonData.tlsSkipVerify = false;\n    }\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n    { name: '11', value: 1100 },\n    { name: '12', value: 1200 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\nimport { PostgresQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport const plugin = new DataSourcePlugin<PostgresDatasource, PostgresQuery>(PostgresDatasource)\n  .setQueryCtrl(PostgresQueryCtrl)\n  .setConfigCtrl(PostgresConfigCtrl)\n  .setAnnotationQueryCtrl(PostgresAnnotationsQueryCtrl);\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}