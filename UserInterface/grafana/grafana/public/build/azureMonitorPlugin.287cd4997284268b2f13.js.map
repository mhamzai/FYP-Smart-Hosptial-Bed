{"version":3,"sources":["webpack:///./public/app/features/explore/slate-plugins/prism/index.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/typeahead.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/query_field.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/kusto/kusto.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/KustoQueryField.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/editor_component.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/insights_analytics/insights_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.tsx"],"names":["PrismPlugin","definition","language","Prism","languages","renderDecoration","props","editor","next","children","decoration","type","className","data","get","decorateNode","node","texts","getTexts","toArray","tstring","map","t","text","join","grammar","tokens","tokenize","decorations","startText","shift","endText","startOffset","endOffset","start","processToken","token","acc","types","alias","content","newlines","split","length","end","available","remaining","range","createDecoration","anchor","key","offset","focus","push","subToken","TypeaheadItem","React","PureComponent","el","getRef","this","componentDidUpdate","prevProps","isSelected","offsetParent","container","offsetTop","scrollTop","offsetHeight","scrollIntoView","render","hint","label","onClickItem","ref","onClick","TypeaheadGroup","items","selected","item","display","indexOf","Typeahead","groupedItems","menuRef","selectedItems","g","flattenSuggestions","s","reduce","concat","makeFragment","lines","line","Block","create","nodes","Text","Document","Portal","Component","constructor","super","index","prefix","document","createElement","classList","add","body","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","QueryField","context","menuEl","plugins","resetTimer","onChange","value","changed","state","setState","requestAnimationFrame","onTypeahead","onChangeQuery","onQueryChange","Plain","serialize","onKeyDown","event","typeaheadIndex","suggestions","keyboardEvent","preventDefault","stopPropagation","resetTypeahead","ctrlKey","shiftKey","flattenedSuggestions","suggestion","Math","abs","applyTypeahead","max","change","Value","callback","typeaheadPrefix","typeaheadContext","handleBlur","onBlur","setTimeout","restoreEscapeKeyBinding","handleFocus","onFocus","removeEscapeKeyBinding","updateMenu","menu","selection","window","getSelection","anchorNode","parentElement","rect","getBoundingClientRect","scrollX","scrollY","screenHeight","innerHeight","menuLeft","left","menuTop","top","height","menuHeight","style","opacity","maxHeight","removeAttribute","renderMenu","portalPrefix","selectedIndex","selectedKeys","i","prismDefinition","prismLanguage","query","BracesPlugin","ClearPlugin","RunnerPlugin","handler","onPressEnter","NewlinePlugin","PluginPrism","labelKeys","labelValues","initialQuery","componentDidMount","clearTimeout","keybindingSrv","unbind","initGlobals","autoCorrect","placeholder","spellCheck","operatorTokens","functionTokens","KEYWORDS","grafanaMacros","tokenizer","comment","pattern","lookbehind","greedy","inside","duration","RegExp","builtin","f","string","keyword","boolean","number","operator","punctuation","variable","argument","cleanText","replace","trim","wrapText","KustoQueryField","fields","events","schema","force","wrapperNode","closest","isBlurred","getRangeAt","textContent","substr","modelOffset","anchorOffset","modelPrefix","anchorText","slice","suggestionGroups","wrapperClasses","contains","getColumnSuggestions","match","getFunctionSuggestions","getTableSuggestions","db","getDBFromDatabaseFunction","normalizeQuery","fetchSchema","getInitialSuggestions","getKeywordSuggestions","str","exec","getLastWord","results","toLowerCase","filteredSuggestions","group","skipFilter","filter","c","prefixMatch","typeaheadText","suggestionText","nextChar","DOMUtil","getNextCharacter","backward","deleteBackwards","suffixLength","forward","deleteBackward","deleteForward","insertText","moveForward","Databases","Default","debounce","Tables","Name","table","getTableFromContext","tableSchema","OrderedColumns","Type","normalizedQuery","getSchema","defaultSchemaTemplate","castSchema","Editor","edited","execute","variables","Kusto","templateVariables","defaultProps","coreModule","directive","reactDirective","watchDepth","UrlBuilder","baseUrl","subscriptionId","resourceGroup","metricDefinition","resourceName","apiVersion","rn","service","substring","lastIndexOf","metricNamespace","encodeURIComponent","ResponseParser","result","textFieldName","valueFieldName","list","find","name","metricName","defaultAggTypes","metricData","v","primaryAggType","primaryAggregationType","supportedAggTypes","supportedAggregationTypes","supportedTimeGrains","parseTimeGrains","metricAvailabilities","dimensions","parseDimensions","timeGrains","forEach","avail","timeGrain","TimeGrainConverter","createTimeGrainFromISO8601Duration","metadataDimensions","dimension","localizedValue","properties","SupportedNamespaces","cloudName","supportedMetricNamespaces","azuremonitor","govazuremonitor","germanyazuremonitor","chinaazuremonitor","aggregationTypeMap","None","Total","Minimum","Maximum","Average","Count","AzureMonitorDatasource","DataSourceWithBackend","instanceSettings","apiPreviewVersion","defaultSubscriptionId","azurePortalUrl","url","timeSrv","getTimeSrv","jsonData","cloud","getAzureCloud","route","getManagementApiRoute","getAzurePortalUrl","isConfigured","validateDatasource","filterQuery","hide","azureMonitor","aggregation","request","metricQueries","targets","prev","cur","refId","pipe","mergeMap","res","from","processResponse","df","metricQuery","buildAzurePortalUrl","subscription","timeRange","field","config","links","title","targetBlank","stringifyAzurePortalUrlParam","stringValue","JSON","stringify","aggregationType","chartDef","v2charts","metrics","resourceMetadata","id","namespace","metricVisualization","displayName","resourceDisplayName","timeContext","absolute","startTime","endTime","to","applyTemplateVariables","target","scopedVars","timeGrainUnit","TimegrainConverter","createISO8601Duration","templateSrv","getTemplateSrv","toString","dimensionFilters","queryType","AzureQueryType","AzureMonitor","allowedTimeGrainsMs","format","metricFindQueryInternal","getSubscriptions","getResourceGroups","resourceGroupsQueryWithSub","toVariable","metricDefinitionsQuery","getMetricDefinitions","metricDefinitionsQueryWithSub","resourceNamesQuery","getResourceNames","resourceNamesQueryWithSub","metricNamespaceQuery","getMetricNamespaces","metricNamespaceQueryWithSub","metricNamesQuery","getMetricNames","metricNamesQueryWithSub","metric","doRequest","then","parseSubscriptions","parseResponseValues","shouldHardcodeBlobStorage","resourceTypeDisplayNames","startsWith","parseResourceNames","buildAzureMonitorGetMetricNamespacesUrl","buildAzureMonitorGetMetricNamesUrl","getMetricMetadata","parseMetadata","validationError","Promise","resolve","response","status","message","e","statusText","error","code","getAuthType","isValidConfigField","tenantId","clientId","maxRetries","getBackendSrv","datasourceRequest","method","catch","parseQueryResult","columns","raw","xaxis","yaxises","yaxis","spliton","Columns","rows","Rows","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","row","yaxisColumn","yaxisName","bucket","findOrCreateBucket","epoch","dateTimeToEpoch","datapoints","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","hasSegmentsField","segments","j","getTargetName","meta","dataTarget","segment","segmentName","segmentValue","prop","isObject","regex","g1","g2","obj","keys","_keys","without","dataObj","intersection","dateTimeValue","dateTime","valueOf","toTextValueList","Error","defaultAggregation","supportedAggregations","supportedGroupBy","all","parseGroupBys","parseQuerySchema","columnTable","columnName","columnType","values","AppInsightsDatasource","version","applicationId","logAnalyticsColumns","appInsightsAppId","getAppInsightsApiRoute","createRawQueryRequest","options","timeColumn","valueColumn","segmentColumn","appInsights","rawQuery","rawQueryString","old","timeGrainCount","groupBy","dimensionFilter","isString","ApplicationInsights","d","appInsightsGroupByQuery","getGroupBys","testDatasource","parseMetricNames","getQuerySchema","LogAnalyticsQuerystringBuilder","defaultTimeField","generate","queryString","macroRegexp","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","interval","uriString","startOf","toISOString","rangeRaw","now","Date","until","timeFieldArg","timeField","inputs","firstCommaIndex","templateVar","tables","resultFormat","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","executedQueryString","col","parseToVariables","queryResult","flattenDeep","transformToAnnotations","textIndex","tagsIndex","annotation","time","floor","tags","METADATA_FUNCTION_PARAMS","transformMetadataFunction","sourceSchema","functions","fn","params","parameters","arg","defaultValue","cslDefaultValue","inputParameters","AzureLogAnalyticsDatasource","azureMonitorUrl","defaultOrFirstWorkspace","cache","Map","logAnalyticsRoute","getLogAnalyticsApiRoute","managementRoute","getLogAnalyticsManagementApiRoute","sameAsMonitor","isLogAnalyticsSameAs","logAnalyticsSubscriptionId","logAnalyticsDefaultWorkspace","getWorkspaceList","val","workspaceListUrl","resourceUri","resp","ok","nameOrIdOrSomething","database","majorVersion","minorVersion","clusterType","cluster","connectionString","databases","transformMetadataToKustoSchema","getMetadata","azureLogAnalytics","resource","workspace","interpolateVariable","LogAnalytics","encodedQuery","custom","buildDeepLink","customMeta","base64Enc","workspaceId","details","getWorkspaceDetails","o","customerId","getWorkspaces","workspacesQueryWithSub","getDefaultOrFirstWorkspace","resourceURI","queries","buildQuery","promises","doQueries","err","innererror","querystring","isGUIDish","datasourceId","multi","includeAll","getDefaultOrFirstSubscription","annotationQuery","reject","useCache","has","set","resourceOrWorkspace","getErrorMessage","logAnalyticsTenantId","logAnalyticsClientId","InsightsAnalyticsDatasource","insightsAnalytics","InsightsAnalytics","AzureResourceGraphDatasource","azureResourceGraph","AzureResourceGraph","subscriptions","_","Datasource","DataSourceApi","azureMonitorDatasource","azureLogAnalyticsDatasource","resourcePickerData","azureResourceGraphDatasource","appInsightsDatasource","insightsAnalyticsDatasource","pseudoDatasource","optionsKey","ResourcePickerData","byType","migrateQuery","opts","queryForType","cloneDeep","requestId","observables","Array","entries","req","forkJoin","frame","LoadingState","Done","of","aiResult","amResult","alaResult","upperFirst","replaceTemplateVariable","getAppInsightsMetricNames","getAppInsightsMetricMetadata","getAppInsightsColumns","getAzureLogAnalyticsWorkspaces","interpolateVariablesInQueries","getVariables","migrateMetricsDimensionFilters","AzureMonitorQueryCtrl","QueryCtrl","$scope","$injector","defaultDropdownValue","dummyDiminsionString","queryQueryTypeOptions","reactQueryEditors","defaults","undefined","aggOptions","datasource","resultFormats","workspaces","showHelp","showLastQuery","lastQuery","lastQueryError","panelCtrl","panel","handleQueryCtrlError","bind","getAzureLogAnalyticsSchema","onLogAnalyticsQueryChange","nextQuery","onLogAnalyticsQueryExecute","refresh","onInsightsAnalyticsQueryChange","onQueryExecute","getAppInsightsQuerySchema","removeGroupBy","splice","handleNewQuery","newQuery","Object","assign","defaultsDeep","migrateTimeGrains","migrateToFromTimes","migrateToDefaultNamespace","migrateApplicationInsightsKeys","migrateApplicationInsightsDimensions","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","dataList","anySeriesFromQuery","oldAzureTimeGrains","convertTimeGrainsToMs","mappings","groupByOptions","onQueryTypeChange","subs","sub","onSubscriptionChange","generateAutoUnits","findClosestTimeGrain","createKbnUnitFromISO8601Duration","getAzureMonitorAutoInterval","getApplicationInsightAutoInterval","azureMonitorAddDimensionFilter","azureMonitorRemoveDimensionFilter","onAppInsightsColumnChange","onAppInsightsMetricNameChange","aggData","getAppInsightsGroupBySegments","option","resetAppInsightsGroupBy","updateTimeGrainType","timeGrainType","updateAppInsightsTimeGrain","oldDimension","templateUrl","Select","Input","LegacyForms","authTypeOptions","AzureCredentialsForm","credentials","azureCloudOptions","onCredentialsChange","hasRequiredFields","isCredentialsComplete","setSubscriptions","useState","loadSubscriptionsClicked","onLoadSubscriptions","useReducer","useEffect","updateSubscriptions","canceled","received","autoSelect","opt","updated","managedIdentityEnabled","tooltip","authType","azureCloud","clientSecret","disabled","variant","size","azureClouds","MonitorConfig","updateOptions","useMemo","getCredentials","azure","updateCredentials","Switch","AnalyticsConfig","primaryCredentials","logAnalyticsCredentials","getLogAnalyticsCredentials","credentialsUsed","credentialsEnabled","defaultWorkspace","setWorkspaces","loadWorkspaces","onLoadWorkspaces","updateWorkspaces","sameAsSwitched","setSameAsSwitched","tooltipAttribute","showSameAsHelpMsg","checked","sameAs","currentTarget","updateLogAnalyticsSameAs","severity","updatedCredentials","updateLogAnalyticsCredentials","InsightsConfig","onAppInsightsResetApiKey","onResetOptionKey","onUpdateJsonDataOption","onUpdateSecureJsonDataOption","secureJsonFields","appInsightsApiKey","secureJsonData","ConfigEditor","optionsFunc","onOptionsChange","unsaved","saveOptions","async","put","updateDatasourcePluginOption","parseSubscriptionsForSelect","getLogAnalyticsSubscriptions","parseWorkspacesForSelect","updateDatasourcePluginJsonDataOption","updateDatasourcePluginSecureJsonDataOption","resetSecureKey","updateDatasourcePluginResetOption","appInsightsInitiallyConfigured","isAppInsightsConfigured","AzureMonitorAnnotationsQueryCtrl","defaultQuery","initDropdowns","bustCache","plugin","DataSourcePlugin","setConfigEditor","setQueryCtrl","setAnnotationQueryCtrl"],"mappings":"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AMjBjE,MAAO3G,cAAIwT,EAAOzT,KAAK4G,MAAMiE,GANZ,oBAWvB,OAAO+I,EAGsB,gCAACH,GAC9B,MAAMG,EAAgD,GAEtD,IAAKH,EACH,OAAOG,EAKT,IAAK,IAAI/I,EAAI,EAAGA,EAAI4I,EAAOzT,KAAK4G,MAAM9E,OAAQ+I,IACvCgJ,eAAKD,EAAM,CAAC,QAAS3T,cAAIwT,EAAOzT,KAAK4G,MAAMiE,GAAGwK,WAH9B,iBAInBzB,EAAKpR,KAAK,CACRmB,MAAO1D,cAAIwT,EAAOzT,KAAK4G,MAAMiE,GAJb,QAKhBjE,MAAO3G,cAAIwT,EAAOzT,KAAK4G,MAAMiE,GAAGwK,WANf,gBAWvB,OAAOzB,GCtKI,MAAM0B,EAkPnB9P,YAAoB+P,GAAmB,KAjPvCC,0BAAiC,CAC/BC,aAAc,CACZ,qCACA,kCACA,iDACA,0CACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,8CACA,yCACA,6CACA,kCACA,2CACA,sCACA,kCACA,uCACA,mCACA,iCACA,+BACA,oCACA,4BACA,yCACA,wCACA,6BACA,yCACA,sCACA,gCACA,8BACA,+BACA,uCACA,gCACA,4BACA,2BACA,2CACA,4BACA,iDACA,gDACA,wDACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,gCACA,gCACA,2CACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,mCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4CACA,uDACA,uEACA,8DACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,gBAAiB,CACf,qCACA,kCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,oBAAqB,CACnB,qCACA,gCACA,wBACA,2CACA,mDACA,oCACA,4CACA,+BACA,oCACA,4BACA,yCACA,gCACA,8BACA,uCACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,kBAAmB,CACjB,qCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,gCACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,kDAImC,KAAnBL,YAEpBtV,MACE,OAAO8C,KAAKyS,0BAA0BzS,KAAKwS,Y,yFCrN/C,MAGMM,GAA6C,CACjDC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,MAAO,GAGM,MAAMC,WAA+BC,wBAYlD7Q,YAAoB8Q,GAClB7Q,MAAM6Q,GADmF,KAX3FrD,WAAa,aAW8E,KAV3FsD,kBAAoB,qBAUuE,KAT3FC,2BAS2F,OAR3F5D,aAQ2F,OAP3F6D,oBAO2F,OAN3F3D,mBAM2F,OAL3FE,kBAK2F,OAJ3F0D,SAI2F,OAH3FlB,0BAAsC,GAGqD,KAF3FmB,aAE2F,OAAvEL,mBAGlBvT,KAAK4T,QAAUC,cACf7T,KAAKyT,sBAAwBF,EAAiBO,SAAShE,eAEvD,MAAMiE,EAAQC,YAAcT,GACtBU,EAAQC,YAAsBH,GACpC/T,KAAK6P,QAAW,IAAGoE,kBACnBjU,KAAK0T,eAAiBS,YAAkBJ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","file":"azureMonitorPlugin.287cd4997284268b2f13.js","sourcesContent":["import React from 'react';\nimport Prism from 'prismjs';\nimport { Decoration } from 'slate';\nimport { Editor } from '@grafana/slate-react';\n\nconst TOKEN_MARK = 'prism-token';\n\nexport function setPrismTokens(language: string, field: string | number, values: any, alias = 'variable') {\n  Prism.languages[language][field] = {\n    alias,\n    pattern: new RegExp(`(?:^|\\\\s)(${values.join('|')})(?:$|\\\\s)`),\n  };\n}\n\n/**\n * Code-highlighting plugin based on Prism and\n * https://github.com/ianstormtaylor/slate/blob/master/examples/code-highlighting/index.js\n *\n * (Adapted to handle nested grammar definitions.)\n */\n\nexport default function PrismPlugin({ definition, language }: { definition: any; language: string }) {\n  if (definition) {\n    // Don't override exising modified definitions\n    Prism.languages[language] = Prism.languages[language] || definition;\n  }\n\n  return {\n    /**\n     * Render a Slate mark with appropriate CSS class names\n     *\n     * @param {Object} props\n     * @returns {Element}\n     */\n\n    renderDecoration(props: any, editor: Editor, next: () => any): JSX.Element {\n      const { children, decoration } = props;\n      // Only apply spans to marks identified by this plugin\n      if (decoration.type !== TOKEN_MARK) {\n        return next();\n      }\n      const className = `token ${decoration.data.get('types')}`;\n      return <span className={className}>{children}</span>;\n    },\n\n    /**\n     * Decorate code blocks with Prism.js highlighting.\n     *\n     * @param {Node} node\n     * @returns {Array}\n     */\n\n    decorateNode(node: any, editor: Editor, next: () => any): any[] {\n      if (node.type !== 'paragraph') {\n        return [];\n      }\n\n      const texts = node.getTexts().toArray();\n      const tstring = texts.map((t: { text: any }) => t.text).join('\\n');\n      const grammar = Prism.languages[language];\n      const tokens = Prism.tokenize(tstring, grammar);\n      const decorations: Decoration[] = [];\n      let startText = texts.shift();\n      let endText = startText;\n      let startOffset = 0;\n      let endOffset = 0;\n      let start = 0;\n\n      function processToken(token: any, acc?: string) {\n        // Accumulate token types down the tree\n        const types = `${acc || ''} ${token.type || ''} ${token.alias || ''}`;\n\n        // Add mark for token node\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          startText = endText;\n          startOffset = endOffset;\n\n          const content = typeof token === 'string' ? token : token.content;\n          const newlines = content.split('\\n').length - 1;\n          const length = content.length - newlines;\n          const end = start + length;\n\n          let available = startText.text.length - startOffset;\n          let remaining = length;\n\n          endOffset = startOffset + remaining;\n\n          while (available < remaining) {\n            endText = texts.shift();\n            remaining = length - available;\n            available = endText.text.length;\n            endOffset = remaining;\n          }\n\n          // Inject marks from up the tree (acc) as well\n          if (typeof token !== 'string' || acc) {\n            const range = node.createDecoration({\n              anchor: {\n                key: startText.key,\n                offset: startOffset,\n              },\n              focus: {\n                key: endText.key,\n                offset: endOffset,\n              },\n              type: TOKEN_MARK,\n              data: { types },\n            });\n\n            decorations.push(range);\n          }\n\n          start = end;\n        } else if (token.content && token.content.length) {\n          // Tokens can be nested\n          for (const subToken of token.content) {\n            processToken(subToken, types);\n          }\n        }\n      }\n\n      // Process top-level tokens\n      for (const token of tokens) {\n        processToken(token);\n      }\n\n      return decorations;\n    },\n  };\n}\n","import React from 'react';\n\nfunction scrollIntoView(el: any) {\n  if (!el || !el.offsetParent) {\n    return;\n  }\n  const container = el.offsetParent;\n  if (el.offsetTop > container.scrollTop + container.offsetHeight || el.offsetTop < container.scrollTop) {\n    container.scrollTop = el.offsetTop - container.offsetTop;\n  }\n}\n\nclass TypeaheadItem extends React.PureComponent<any, any> {\n  el: any;\n  componentDidUpdate(prevProps: any) {\n    if (this.props.isSelected && !prevProps.isSelected) {\n      scrollIntoView(this.el);\n    }\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const { hint, isSelected, label, onClickItem } = this.props;\n    const className = isSelected ? 'typeahead-item typeahead-item__selected' : 'typeahead-item';\n    const onClick = () => onClickItem(label);\n    return (\n      <li ref={this.getRef} className={className} onClick={onClick}>\n        {label}\n        {hint && isSelected ? <div className=\"typeahead-item-hint\">{hint}</div> : null}\n      </li>\n    );\n  }\n}\n\nclass TypeaheadGroup extends React.PureComponent<any, any> {\n  render() {\n    const { items, label, selected, onClickItem } = this.props;\n    return (\n      <li className=\"typeahead-group\">\n        <div className=\"typeahead-group__title\">{label}</div>\n        <ul className=\"typeahead-group__list\">\n          {items.map((item: any) => {\n            const text = typeof item === 'object' ? item.text : item;\n            const label = typeof item === 'object' ? item.display || item.text : item;\n            return (\n              <TypeaheadItem\n                key={text}\n                onClickItem={onClickItem}\n                isSelected={selected.indexOf(text) > -1}\n                hint={item.hint}\n                label={label}\n              />\n            );\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nclass Typeahead extends React.PureComponent<any, any> {\n  render() {\n    const { groupedItems, menuRef, selectedItems, onClickItem } = this.props;\n    return (\n      <ul className=\"typeahead\" ref={menuRef}>\n        {groupedItems.map((g: any) => (\n          <TypeaheadGroup key={g.label} onClickItem={onClickItem} selected={selectedItems} {...g} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Typeahead;\n","import PluginPrism from 'app/features/explore/slate-plugins/prism';\nimport { BracesPlugin, ClearPlugin, RunnerPlugin, NewlinePlugin } from '@grafana/ui';\nimport Typeahead from './typeahead';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\n\nimport { Block, Document, Text, Value, Editor as CoreEditor } from 'slate';\nimport { Editor } from '@grafana/slate-react';\nimport Plain from 'slate-plain-serializer';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\nfunction flattenSuggestions(s: any) {\n  return s ? s.reduce((acc: any, g: any) => acc.concat(g.items), []) : [];\n}\n\nexport const makeFragment = (text: string) => {\n  const lines = text.split('\\n').map((line: any) =>\n    Block.create({\n      type: 'paragraph',\n      nodes: [Text.create(line)],\n    } as any)\n  );\n\n  const fragment = Document.create({\n    nodes: lines,\n  });\n  return fragment;\n};\n\nexport const getInitialValue = (query: string) => Value.create({ document: makeFragment(query) });\n\nclass Portal extends React.Component<any, any> {\n  node: any;\n\n  constructor(props: any) {\n    super(props);\n    const { index = 0, prefix = 'query' } = props;\n    this.node = document.createElement('div');\n    this.node.classList.add(`slate-typeahead`, `slate-typeahead-${prefix}-${index}`);\n    document.body.appendChild(this.node);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.node);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.node);\n  }\n}\n\nclass QueryField extends React.Component<any, any> {\n  menuEl: any;\n  plugins: any;\n  resetTimer: any;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n\n    const { prismDefinition = {}, prismLanguage = 'kusto' } = props;\n\n    this.plugins = [\n      BracesPlugin(),\n      ClearPlugin(),\n      RunnerPlugin({ handler: props.onPressEnter }),\n      NewlinePlugin(),\n      PluginPrism({ definition: prismDefinition, language: prismLanguage }),\n    ];\n\n    this.state = {\n      labelKeys: {},\n      labelValues: {},\n      suggestions: [],\n      typeaheadIndex: null,\n      typeaheadPrefix: '',\n      value: getInitialValue(props.initialQuery || ''),\n    };\n  }\n\n  componentDidMount() {\n    this.updateMenu();\n  }\n\n  componentWillUnmount() {\n    this.restoreEscapeKeyBinding();\n    clearTimeout(this.resetTimer);\n  }\n\n  componentDidUpdate() {\n    this.updateMenu();\n  }\n\n  onChange = ({ value }: { value: Value }) => {\n    const changed = value.document !== this.state.value.document;\n    this.setState({ value }, () => {\n      if (changed) {\n        // call typeahead only if query changed\n        requestAnimationFrame(() => this.onTypeahead());\n        this.onChangeQuery();\n      }\n    });\n  };\n\n  onChangeQuery = () => {\n    // Send text change to parent\n    const { onQueryChange } = this.props;\n    if (onQueryChange) {\n      onQueryChange(Plain.serialize(this.state.value));\n    }\n  };\n\n  onKeyDown = (event: Event, editor: CoreEditor, next: Function) => {\n    const { typeaheadIndex, suggestions } = this.state;\n    const keyboardEvent = event as KeyboardEvent;\n\n    switch (keyboardEvent.key) {\n      case 'Escape': {\n        if (this.menuEl) {\n          keyboardEvent.preventDefault();\n          keyboardEvent.stopPropagation();\n          this.resetTypeahead();\n          return true;\n        }\n        break;\n      }\n\n      case ' ': {\n        if (keyboardEvent.ctrlKey) {\n          keyboardEvent.preventDefault();\n          this.onTypeahead(true);\n          return true;\n        }\n        break;\n      }\n\n      case 'Tab':\n      case 'Enter': {\n        if (this.menuEl && typeaheadIndex !== null) {\n          // Dont blur input\n          keyboardEvent.preventDefault();\n          if (!suggestions || !suggestions.length || keyboardEvent.shiftKey || keyboardEvent.ctrlKey) {\n            return next();\n          }\n\n          // Get the currently selected suggestion\n          const flattenedSuggestions = flattenSuggestions(suggestions);\n          const selected = Math.abs(typeaheadIndex);\n          const selectedIndex = selected % flattenedSuggestions.length || 0;\n          const suggestion = flattenedSuggestions[selectedIndex];\n\n          return this.applyTypeahead(editor, suggestion);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        if (this.menuEl) {\n          // Select next suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: (typeaheadIndex || 0) + 1 });\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        if (this.menuEl) {\n          // Select previous suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: Math.max(0, (typeaheadIndex || 0) - 1) });\n        }\n        break;\n      }\n\n      default: {\n        // console.log('default key', event.key, event.which, event.charCode, event.locale, data.key);\n        break;\n      }\n    }\n    return next();\n  };\n\n  onTypeahead = (change = false, item?: any): boolean | void => {\n    return change;\n  };\n\n  applyTypeahead = (\n    editor?: CoreEditor,\n    suggestion?: { text: any; type: string; deleteBackwards: any }\n  ): { value: Value } => {\n    return { value: new Value() };\n  };\n\n  resetTypeahead = (callback?: () => void) => {\n    this.setState(\n      {\n        suggestions: [],\n        typeaheadIndex: null,\n        typeaheadPrefix: '',\n        typeaheadContext: null,\n      },\n      callback\n    );\n  };\n\n  handleBlur = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onBlur } = this.props;\n    // If we dont wait here, menu clicks wont work because the menu\n    // will be gone.\n    this.resetTimer = setTimeout(this.resetTypeahead, 100);\n    if (onBlur) {\n      onBlur();\n    }\n    this.restoreEscapeKeyBinding();\n    return next();\n  };\n\n  handleFocus = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus();\n    }\n    // Don't go back to dashboard if Escape pressed inside the editor.\n    this.removeEscapeKeyBinding();\n    return next();\n  };\n\n  removeEscapeKeyBinding() {\n    keybindingSrv.unbind('esc', 'keydown');\n  }\n\n  restoreEscapeKeyBinding() {\n    keybindingSrv.initGlobals();\n  }\n\n  onClickItem = (item: any) => {\n    const { suggestions } = this.state;\n    if (!suggestions || suggestions.length === 0) {\n      return;\n    }\n\n    // Manually triggering change\n    const change = this.applyTypeahead();\n    this.onChange(change);\n  };\n\n  updateMenu = () => {\n    const { suggestions } = this.state;\n    const menu = this.menuEl;\n    const selection = window.getSelection();\n\n    // No menu, nothing to do\n    if (!menu || !selection) {\n      return;\n    }\n\n    const node = selection.anchorNode;\n\n    // No suggestions or blur, remove menu\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      menu.removeAttribute('style');\n      return;\n    }\n\n    // Align menu overlay to editor node\n    if (node && node.parentElement) {\n      // Read from DOM\n      const rect = node.parentElement.getBoundingClientRect();\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      const screenHeight = window.innerHeight;\n\n      const menuLeft = rect.left + scrollX - 2;\n      const menuTop = rect.top + scrollY + rect.height + 4;\n      const menuHeight = screenHeight - menuTop - 10;\n\n      // Write DOM\n      requestAnimationFrame(() => {\n        menu.style.opacity = 1;\n        menu.style.top = `${menuTop}px`;\n        menu.style.left = `${menuLeft}px`;\n        menu.style.maxHeight = `${menuHeight}px`;\n      });\n    }\n  };\n\n  menuRef = (el: any) => {\n    this.menuEl = el;\n  };\n\n  renderMenu = () => {\n    const { portalPrefix } = this.props;\n    const { suggestions, typeaheadIndex } = this.state;\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      return null;\n    }\n\n    // Guard selectedIndex to be within the length of the suggestions\n    let selectedIndex = Math.max(typeaheadIndex, 0);\n    const flattenedSuggestions = flattenSuggestions(suggestions);\n    selectedIndex = selectedIndex % flattenedSuggestions.length || 0;\n    const selectedKeys = (typeaheadIndex !== null && flattenedSuggestions.length > 0\n      ? [flattenedSuggestions[selectedIndex]]\n      : []\n    ).map((i) => (typeof i === 'object' ? i.text : i));\n\n    // Create typeahead in DOM root so we can later position it absolutely\n    return (\n      <Portal prefix={portalPrefix}>\n        <Typeahead\n          menuRef={this.menuRef}\n          selectedItems={selectedKeys}\n          onClickItem={this.onClickItem}\n          groupedItems={suggestions}\n        />\n      </Portal>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slate-query-field\">\n        {this.renderMenu()}\n        <Editor\n          autoCorrect={false}\n          onBlur={this.handleBlur}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          onFocus={this.handleFocus}\n          placeholder={this.props.placeholder}\n          plugins={this.plugins}\n          spellCheck={false}\n          value={this.state.value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default QueryField;\n","/* eslint-disable max-len */\nexport const operatorTokens = [\n  { text: '!between', hint: 'Matches the input that is outside the inclusive range.' },\n  { text: 'as', hint: \"Binds a name to the operator's input tabular expression.\" },\n  { text: 'between', hint: 'Matches the input that is inside the inclusive range.' },\n  {\n    text: 'consume',\n    hint:\n      'The `consume` operator consumes the tabular data stream handed to it. It is\\r\\nmostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.',\n  },\n  { text: 'count', hint: 'Returns the number of records in the input record set.' },\n  { text: 'datatable', hint: 'Returns a table whose schema and values are defined in the query itself.' },\n  {\n    text: 'distinct',\n    hint: 'Produces a table with the distinct combination of the provided columns of the input table.',\n  },\n  { text: 'evaluate', hint: 'Invokes a service-side query extension (plugin).' },\n  { text: 'extend', hint: 'Create calculated columns and append them to the result set.' },\n  {\n    text: 'externaldata',\n    hint:\n      'Returns a table whose schema is defined in the query itself, and whose data is read from an external raw file.',\n  },\n  {\n    text: 'facet',\n    hint:\n      'Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.',\n  },\n  { text: 'find', hint: 'Finds rows that match a predicate across a set of tables.' },\n  { text: 'fork', hint: 'Runs multiple consumer operators in parallel.' },\n  { text: 'getschema', hint: 'Produce a table that represents a tabular schema of the input.' },\n  { text: 'in', hint: 'Filters a recordset based on the provided set of values.' },\n  { text: 'invoke', hint: 'Invokes lambda that receives the source of `invoke` as tabular parameter argument.' },\n  {\n    text: 'join',\n    hint:\n      'Merge the rows of two tables to form a new table by matching values of the specified column(s) from each table.',\n  },\n  { text: 'limit', hint: 'Return up to the specified number of rows.' },\n  { text: 'make-series', hint: 'Create series of specified aggregated values along specified axis.' },\n  { text: 'mvexpand', hint: 'Expands multi-value array or property bag.' },\n  { text: 'order', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'parse', hint: 'Evaluates a string expression and parses its value into one or more calculated columns.' },\n  {\n    text: 'print',\n    hint:\n      'Evaluates one or more scalar expressions and inserts the results (as a single-row table with as many columns as there are expressions) into the output.',\n  },\n  { text: 'project', hint: 'Select the columns to include, rename or drop, and insert new computed columns.' },\n  { text: 'project-away', hint: 'Select what  columns to exclude from the input.' },\n  { text: 'project-rename', hint: 'Renames columns in the result output.' },\n  { text: 'range', hint: 'Generates a single-column table of values.' },\n  { text: 'reduce', hint: 'Groups a set of strings together based on values similarity.' },\n  { text: 'render', hint: 'Instructs the user agent to render the results of the query in a particular way.' },\n  { text: 'sample', hint: 'Returns up to the specified number of random rows from the input table.' },\n  {\n    text: 'sample-distinct',\n    hint:\n      'Returns a single column that contains up to the specified number of distinct values of the requested column.',\n  },\n  { text: 'search', hint: 'The search operator provides a multi-table/multi-column search experience.' },\n  { text: 'serialize', hint: 'Marks that order of the input row set is safe for window functions usage.' },\n  { text: 'sort', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'summarize', hint: 'Produces a table that aggregates the content of the input table.' },\n  { text: 'take', hint: 'Return up to the specified number of rows.' },\n  { text: 'top', hint: 'Returns the first *N* records sorted by the specified columns.' },\n  {\n    text: 'top-hitters',\n    hint: 'Returns an approximation of the first *N* results (assuming skewed distribution of the input).',\n  },\n  {\n    text: 'top-nested',\n    hint: 'Produces hierarchical top results, where each level is a drill-down based on previous level values.',\n  },\n  { text: 'union', hint: 'Takes two or more tables and returns the rows of all of them.' },\n  { text: 'where', hint: 'Filters a table to the subset of rows that satisfy a predicate.' },\n];\n\nexport const functionTokens = [\n  { text: 'abs', hint: 'Calculates the absolute value of the input.' },\n  {\n    text: 'acos',\n    hint:\n      'Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .',\n  },\n  { text: 'ago', hint: 'Subtracts the given timespan from the current UTC clock time.' },\n  { text: 'any', hint: 'Returns random non-empty value from the specified expression values.' },\n  {\n    text: 'arg_max',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'arg_min',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmax',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmin',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  { text: 'array_concat', hint: 'Concatenates a number of dynamic arrays to a single array.' },\n  { text: 'array_length', hint: 'Calculates the number of elements in a dynamic array.' },\n  { text: 'array_slice', hint: 'Extracts a slice of a dynamic array.' },\n  {\n    text: 'array_split',\n    hint:\n      'Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.',\n  },\n  {\n    text: 'asin',\n    hint: 'Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .',\n  },\n  {\n    text: 'assert',\n    hint: 'Checks for a condition; if the condition is false, outputs error messages and fails the query.',\n  },\n  {\n    text: 'atan',\n    hint:\n      'Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .',\n  },\n  {\n    text: 'atan2',\n    hint:\n      'Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).',\n  },\n  { text: 'avg', hint: 'Calculates the average of *Expr* across the group.' },\n  {\n    text: 'avgif',\n    hint:\n      'Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  { text: 'bag_keys', hint: 'Enumerates all the root keys in a dynamic property-bag object.' },\n  { text: 'base64_decodestring', hint: 'Decodes a base64 string to a UTF-8 string' },\n  { text: 'base64_encodestring', hint: 'Encodes a string as base64 string' },\n  { text: 'beta_cdf', hint: 'Returns the standard cumulative beta distribution function.' },\n  { text: 'beta_inv', hint: 'Returns the inverse of the beta cumulative probability beta density function.' },\n  { text: 'beta_pdf', hint: 'Returns the probability density beta function.' },\n  { text: 'bin', hint: 'Rounds values down to an integer multiple of a given bin size.' },\n  {\n    text: 'bin_at',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin's starting point.\\r\\n(See also [`bin function`](./binfunction.md).)\",\n  },\n  {\n    text: 'bin_auto',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin size and starting point provided by a query property.\",\n  },\n  { text: 'binary_and', hint: 'Returns a result of the bitwise `and` operation between two values.' },\n  { text: 'binary_not', hint: 'Returns a bitwise negation of the input value.' },\n  { text: 'binary_or', hint: 'Returns a result of the bitwise `or` operation of the two values.' },\n  { text: 'binary_shift_left', hint: 'Returns binary shift left operation on a pair of numbers.' },\n  { text: 'binary_shift_right', hint: 'Returns binary shift right operation on a pair of numbers.' },\n  { text: 'binary_xor', hint: 'Returns a result of the bitwise `xor` operation of the two values.' },\n  { text: 'buildschema', hint: 'Returns the minimal schema that admits all values of *DynamicExpr*.' },\n  {\n    text: 'case',\n    hint: 'Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.',\n  },\n  {\n    text: 'ceiling',\n    hint: 'Calculates the smallest integer greater than, or equal to, the specified numeric expression.',\n  },\n  { text: 'cluster', hint: 'Changes the reference of the query to a remote cluster.' },\n  {\n    text: 'coalesce',\n    hint: 'Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.',\n  },\n  { text: 'cos', hint: 'Returns the cosine function.' },\n  { text: 'cot', hint: 'Calculates the trigonometric cotangent of the specified angle, in radians.' },\n  {\n    text: 'count',\n    hint:\n      'Returns a count of the records per summarization group (or in total if summarization is done without grouping).',\n  },\n  { text: 'countif', hint: 'Returns a count of rows for which *Predicate* evaluates to `true`.' },\n  {\n    text: 'countof',\n    hint: 'Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.',\n  },\n  { text: 'current_principal', hint: 'Returns the current principal running this query.' },\n  {\n    text: 'cursor_after',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  {\n    text: 'cursor_before_or_at',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  { text: 'database', hint: 'Changes the reference of the query to a specific database within the cluster scope.' },\n  {\n    text: 'datetime_add',\n    hint:\n      'Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).',\n  },\n  {\n    text: 'datetime_diff',\n    hint: 'Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.',\n  },\n  { text: 'datetime_part', hint: 'Extracts the requested date part as an integer value.' },\n  { text: 'dayofmonth', hint: 'Returns the integer number representing the day number of the given month' },\n  { text: 'dayofweek', hint: 'Returns the integer number of days since the preceding Sunday, as a `timespan`.' },\n  { text: 'dayofyear', hint: 'Returns the integer number represents the day number of the given year.' },\n  { text: 'dcount', hint: 'Returns an estimate of the number of distinct values of *Expr* in the group.' },\n  {\n    text: 'dcount_hll',\n    hint:\n      'Calculates the dcount from hll results (which was generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).',\n  },\n  {\n    text: 'dcountif',\n    hint:\n      'Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'degrees',\n    hint:\n      'Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`',\n  },\n  { text: 'distance', hint: 'Returns the distance between two points in meters.' },\n  { text: 'endofday', hint: 'Returns the end of the day containing the date, shifted by an offset, if provided.' },\n  { text: 'endofmonth', hint: 'Returns the end of the month containing the date, shifted by an offset, if provided.' },\n  { text: 'endofweek', hint: 'Returns the end of the week containing the date, shifted by an offset, if provided.' },\n  { text: 'endofyear', hint: 'Returns the end of the year containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'estimate_data_size',\n    hint: 'Returns an estimated data size of the selected columns of the tabular expression.',\n  },\n  { text: 'exp', hint: 'The base-e exponential function of x, which is e raised to the power x: e^x.' },\n  {\n    text: 'exp10',\n    hint: 'The base-10 exponential function of x, which is 10 raised to the power x: 10^x.  \\r\\n**Syntax**',\n  },\n  { text: 'exp2', hint: 'The base-2 exponential function of x, which is 2 raised to the power x: 2^x.' },\n  {\n    text: 'extent_id',\n    hint: 'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\n  },\n  {\n    text: 'extent_tags',\n    hint:\n      'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record resides in.',\n  },\n  { text: 'extract', hint: 'Get a match for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extract_all', hint: 'Get all matches for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extractjson', hint: 'Get a specified element out of a JSON text using a path expression.' },\n  { text: 'floor', hint: 'An alias for [`bin()`](binfunction.md).' },\n  { text: 'format_datetime', hint: 'Formats a datetime parameter based on the format pattern parameter.' },\n  { text: 'format_timespan', hint: 'Formats a timespan parameter based on the format pattern parameter.' },\n  { text: 'gamma', hint: 'Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)' },\n  { text: 'getmonth', hint: 'Get the month number (1-12) from a datetime.' },\n  { text: 'gettype', hint: 'Returns the runtime type of its single argument.' },\n  { text: 'getyear', hint: 'Returns the year part of the `datetime` argument.' },\n  { text: 'hash', hint: 'Returns a hash value for the input value.' },\n  { text: 'hash_sha256', hint: 'Returns a sha256 hash value for the input value.' },\n  { text: 'hll', hint: 'Calculates the Intermediate results of [dcount](dcount-aggfunction.md) across the group.' },\n  {\n    text: 'hll_merge',\n    hint: 'Merges hll results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).',\n  },\n  { text: 'hourofday', hint: 'Returns the integer number representing the hour number of the given date' },\n  {\n    text: 'iff',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'iif',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'indexof',\n    hint: 'Function reports the zero-based index of the first occurrence of a specified string within input string.',\n  },\n  { text: 'ingestion_time', hint: \"Retrieves the record's `$IngestionTime` hidden `datetime` column, or null.\" },\n  {\n    text: 'iscolumnexists',\n    hint:\n      'Returns a boolean value indicating if the given string argument exists in the schema produced by the preceding tabular operator.',\n  },\n  { text: 'isempty', hint: 'Returns `true` if the argument is an empty string or is null.' },\n  { text: 'isfinite', hint: 'Returns whether input is a finite value (is neither infinite nor NaN).' },\n  { text: 'isinf', hint: 'Returns whether input is an infinite (positive or negative) value.' },\n  { text: 'isnan', hint: 'Returns whether input is Not-a-Number (NaN) value.' },\n  { text: 'isnotempty', hint: 'Returns `true` if the argument is not an empty string nor it is a null.' },\n  { text: 'isnotnull', hint: 'Returns `true` if the argument is not null.' },\n  {\n    text: 'isnull',\n    hint:\n      'Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.',\n  },\n  { text: 'log', hint: 'Returns the natural logarithm function.' },\n  { text: 'log10', hint: 'Returns the common (base-10) logarithm function.' },\n  { text: 'log2', hint: 'Returns the base-2 logarithm function.' },\n  {\n    text: 'loggamma',\n    hint: 'Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)',\n  },\n  {\n    text: 'make_datetime',\n    hint: 'Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.',\n  },\n  {\n    text: 'make_dictionary',\n    hint: 'Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *Expr* in the group.',\n  },\n  { text: 'make_string', hint: 'Returns the string generated by the Unicode characters.' },\n  {\n    text: 'make_timespan',\n    hint: 'Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.',\n  },\n  { text: 'makelist', hint: 'Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.' },\n  {\n    text: 'makeset',\n    hint: 'Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.',\n  },\n  {\n    text: 'materialize',\n    hint:\n      'Allows caching a sub-query result during the time of query execution in a way that other subqueries can reference the partial result.',\n  },\n  { text: 'max', hint: 'Returns the maximum value across the group.' },\n  { text: 'max_of', hint: 'Returns the maximum value of several evaluated numeric expressions.' },\n  {\n    text: 'merge_tdigests',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`merge_tdigests()`](merge-tdigests-aggfunction.md)).',\n  },\n  { text: 'min', hint: 'Returns the minimum value agross the group.' },\n  { text: 'min_of', hint: 'Returns the minimum value of several evaluated numeric expressions.' },\n  { text: 'monthofyear', hint: 'Returns the integer number represents the month number of the given year.' },\n  {\n    text: 'next',\n    hint:\n      'Returns the value of a column in a row that it at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  { text: 'not', hint: 'Reverses the value of its `bool` argument.' },\n  {\n    text: 'now',\n    hint:\n      'Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.',\n  },\n  { text: 'pack', hint: 'Creates a `dynamic` object (property bag) from a list of names and values.' },\n  {\n    text: 'pack_all',\n    hint: 'Creates a `dynamic` object (property bag) from all the columns of the tabular expression.',\n  },\n  { text: 'pack_array', hint: 'Packs all input values into a dynamic array.' },\n  { text: 'parse_ipv4', hint: 'Converts input to integer (signed 64-bit) number representation.' },\n  {\n    text: 'parse_json',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/)) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md). \\r\\nIt is superior to using [extractjson() function](./extractjsonfunction.md)\\r\\nwhen you need to extract more than one element of a JSON compound object.',\n  },\n  {\n    text: 'parse_path',\n    hint:\n      'Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path: \\r\\nScheme, RootPath, DirectoryPath, DirectoryName, FileName, Extension, AlternateDataStreamName.\\r\\nIn addition to the simple paths with both types of slashes, supports paths with schemas (e.g. \"file://...\"), shared paths (e.g. \"\\\\\\\\shareddrive\\\\users...\"), long paths (e.g \"\\\\\\\\?\\\\C:...\"\"), alternate data streams (e.g. \"file1.exe:file2.exe\")',\n  },\n  {\n    text: 'parse_url',\n    hint:\n      'Parses an absolute URL `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains all parts of the URL (Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment).',\n  },\n  {\n    text: 'parse_urlquery',\n    hint:\n      'Parses a url query `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains the Query parameters.',\n  },\n  {\n    text: 'parse_user_agent',\n    hint:\n      \"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",\n  },\n  { text: 'parse_version', hint: 'Converts input string representation of version to a comparable decimal number.' },\n  {\n    text: 'parse_xml',\n    hint:\n      'Interprets a `string` as a XML value, converts the value to a [JSON value](https://json.org/) and returns the value as  [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  {\n    text: 'percentile',\n    hint:\n      'Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *Expr*. \\r\\nThe accuracy depends on the density of population in the region of the percentile.',\n  },\n  {\n    text: 'percentile_tdigest',\n    hint:\n      'Calculates the percentile result from tdigest results (which was generated by [tdigest](tdigest-aggfunction.md) or [merge-tdigests](merge-tdigests-aggfunction.md))',\n  },\n  {\n    text: 'percentrank_tdigest',\n    hint:\n      \"Calculates the approximate rank of the value in a set where rank is expressed as percentage of set's size. \\r\\nThis function can be viewed as the inverse of the percentile.\",\n  },\n  { text: 'pi', hint: 'Returns the constant value of Pi (π).' },\n  { text: 'point', hint: 'Returns a dynamic array representation of a point.' },\n  { text: 'pow', hint: 'Returns a result of raising to power' },\n  {\n    text: 'prev',\n    hint:\n      'Returns the value of a column in a row that it at some offset prior to the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'radians',\n    hint:\n      'Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`',\n  },\n  { text: 'rand', hint: 'Returns a random number.' },\n  { text: 'range', hint: 'Generates a dynamic array holding a series of equally-spaced values.' },\n  { text: 'repeat', hint: 'Generates a dynamic array holding a series of equal values.' },\n  { text: 'replace', hint: 'Replace all regex matches with another string.' },\n  { text: 'reverse', hint: 'Function makes reverse of input string.' },\n  { text: 'round', hint: 'Returns the rounded source to the specified precision.' },\n  {\n    text: 'row_cumsum',\n    hint:\n      'Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'row_number',\n    hint:\n      \"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\n  },\n  { text: 'series_add', hint: 'Calculates the element-wise addition of two numeric series inputs.' },\n  { text: 'series_decompose', hint: 'Applies a decomposition transformation on a series.' },\n  {\n    text: 'series_decompose_anomalies',\n    hint:\n      'Anomaly Detection based on series decomposition (refer to [series_decompose()](series-decomposefunction.md))',\n  },\n  { text: 'series_decompose_forecast', hint: 'Forecast based on series decomposition.' },\n  { text: 'series_divide', hint: 'Calculates the element-wise division of two numeric series inputs.' },\n  {\n    text: 'series_equals',\n    hint: 'Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_fill_backward', hint: 'Performs backward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_const', hint: 'Replaces missing values in a series with a specified constant value.' },\n  { text: 'series_fill_forward', hint: 'Performs forward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_linear', hint: 'Performs linear interpolation of missing values in a series.' },\n  { text: 'series_fir', hint: 'Applies a Finite Impulse Response filter on a series.' },\n  {\n    text: 'series_fit_2lines',\n    hint: 'Applies two segments linear regression on a series, returning multiple columns.',\n  },\n  {\n    text: 'series_fit_2lines_dynamic',\n    hint: 'Applies two segments linear regression on a series, returning dynamic object.',\n  },\n  { text: 'series_fit_line', hint: 'Applies linear regression on a series, returning multiple columns.' },\n  { text: 'series_fit_line_dynamic', hint: 'Applies linear regression on a series, returning dynamic object.' },\n  {\n    text: 'series_greater',\n    hint: 'Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.',\n  },\n  {\n    text: 'series_greater_equals',\n    hint: 'Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_iir', hint: 'Applies a Infinite Impulse Response filter on a series.' },\n  { text: 'series_less', hint: 'Calculates the element-wise less (`<`) logic operation of two numeric series inputs.' },\n  {\n    text: 'series_less_equals',\n    hint: 'Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_multiply', hint: 'Calculates the element-wise multiplication of two numeric series inputs.' },\n  {\n    text: 'series_not_equals',\n    hint: 'Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_outliers', hint: 'Scores anomaly points in a series.' },\n  { text: 'series_periods_detect', hint: 'Finds the most significant periods that exist in a time series.' },\n  {\n    text: 'series_periods_validate',\n    hint: 'Checks whether a time series contains periodic patterns of given lengths.',\n  },\n  {\n    text: 'series_seasonal',\n    hint: 'Calculates the seasonal component of a series according to the detected or given seasonal period.',\n  },\n  { text: 'series_stats', hint: 'Returns statistics for a series in multiple columns.' },\n  { text: 'series_stats_dynamic', hint: 'Returns statistics for a series in dynamic object.' },\n  { text: 'series_subtract', hint: 'Calculates the element-wise subtraction of two numeric series inputs.' },\n  { text: 'sign', hint: 'Sign of a numeric expression' },\n  { text: 'sin', hint: 'Returns the sine function.' },\n  {\n    text: 'split',\n    hint:\n      'Splits a given string according to a given delimiter and returns a string array with the contained substrings.',\n  },\n  { text: 'sqrt', hint: 'Returns the square root function.' },\n  { text: 'startofday', hint: 'Returns the start of the day containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'startofmonth',\n    hint: 'Returns the start of the month containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofweek',\n    hint: 'Returns the start of the week containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofyear',\n    hint: 'Returns the start of the year containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'stdev',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'stdevif',\n    hint:\n      'Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'stdevp',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'strcat', hint: 'Concatenates between 1 and 64 arguments.' },\n  { text: 'strcat_array', hint: 'Creates a concatenated string of array values using specified delimiter.' },\n  {\n    text: 'strcat_delim',\n    hint: 'Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.',\n  },\n  { text: 'strcmp', hint: 'Compares two strings.' },\n  { text: 'string_size', hint: 'Returns the size, in bytes, of the input string.' },\n  { text: 'strlen', hint: 'Returns the length, in characters, of the input string.' },\n  { text: 'strrep', hint: 'Repeats given [string](./scalar-data-types/string.md) provided amount of times.' },\n  {\n    text: 'substring',\n    hint: 'Extracts a substring from a source string starting from some index to the end of the string.',\n  },\n  { text: 'sum', hint: 'Calculates the sum of *Expr* across the group.' },\n  { text: 'sumif', hint: 'Returns a sum of *Expr* for which *Predicate* evaluates to `true`.' },\n  { text: 'table', hint: 'References specific table using an query-time evaluated string-expression.' },\n  { text: 'tan', hint: 'Returns the tangent function.' },\n  {\n    text: 'tdigest',\n    hint: 'Calculates the Intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.',\n  },\n  {\n    text: 'tdigest_merge',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).',\n  },\n  { text: 'tobool', hint: 'Converts input to boolean (signed 8-bit) representation.' },\n  { text: 'todatetime', hint: 'Converts input to [datetime](./scalar-data-types/datetime.md) scalar.' },\n  { text: 'todecimal', hint: 'Converts input to decimal number representation.' },\n  {\n    text: 'todouble',\n    hint: 'Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)',\n  },\n  {\n    text: 'todynamic',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  { text: 'toguid', hint: 'Converts input to [`guid`](./scalar-data-types/guid.md) representation.' },\n  { text: 'tohex', hint: 'Converts input to a hexadecimal string.' },\n  { text: 'toint', hint: 'Converts input to integer (signed 32-bit) number representation.' },\n  { text: 'tolong', hint: 'Converts input to long (signed 64-bit) number representation.' },\n  { text: 'tolower', hint: 'Converts input string to lower case.' },\n  { text: 'toscalar', hint: 'Returns a scalar constant value of the evaluated expression.' },\n  { text: 'tostring', hint: 'Converts input to a string representation.' },\n  { text: 'totimespan', hint: 'Converts input  to [timespan](./scalar-data-types/timespan.md) scalar.' },\n  { text: 'toupper', hint: 'Converts a string to upper case.' },\n  {\n    text: 'translate',\n    hint:\n      \"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\n  },\n  { text: 'treepath', hint: 'Enumerates all the path expressions that identify leaves in a dynamic object.' },\n  { text: 'trim', hint: 'Removes all leading and trailing matches of the specified regular expression.' },\n  { text: 'trim_end', hint: 'Removes trailing match of the specified regular expression.' },\n  { text: 'trim_start', hint: 'Removes leading match of the specified regular expression.' },\n  { text: 'url_decode', hint: 'The function converts encoded URL into a to regular URL representation.' },\n  {\n    text: 'url_encode',\n    hint: 'The function converts characters of the input URL into a format that can be transmitted over the Internet.',\n  },\n  {\n    text: 'variance',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'varianceif',\n    hint:\n      'Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'variancep',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'weekofyear', hint: 'Returns the integer number represents the week number.' },\n  {\n    text: 'welch_test',\n    hint: 'Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)',\n  },\n  {\n    text: 'zip',\n    hint:\n      'The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.',\n  },\n];\n\nexport const KEYWORDS = [\n  'by',\n  'on',\n  'contains',\n  'notcontains',\n  'containscs',\n  'notcontainscs',\n  'startswith',\n  'has',\n  'matches',\n  'regex',\n  'true',\n  'false',\n  'and',\n  'or',\n  'typeof',\n  'int',\n  'string',\n  'date',\n  'datetime',\n  'time',\n  'long',\n  'real',\n  '​boolean',\n  'bool',\n];\n\nexport const grafanaMacros = [\n  {\n    text: '$__timeFilter',\n    display: '$__timeFilter()',\n    hint: 'Macro that uses the selected timerange in Grafana to filter the query.',\n  },\n  {\n    text: '$__timeTo',\n    display: '$__timeTo()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T20:09:58.907Z).',\n  },\n  {\n    text: '$__timeFrom',\n    display: '$__timeFrom()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T18:09:58.907Z).',\n  },\n  {\n    text: '$__escapeMulti',\n    display: '$__escapeMulti()',\n    hint: 'Macro to escape multi-value template variables that contain illegal characters.',\n  },\n  { text: '$__contains', display: '$__contains()', hint: 'Macro for multi-value template variables.' },\n];\n\n// Kusto operators\n// export const OPERATORS = ['+', '-', '*', '/', '>', '<', '==', '<>', '<=', '>=', '~', '!~'];\n\nexport const DURATION = ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS'];\n\nconst tokenizer = {\n  comment: {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true,\n  },\n  'function-context': {\n    pattern: /[a-z0-9_]+\\([^)]*\\)?/i,\n    inside: {},\n  },\n  duration: {\n    pattern: new RegExp(`${DURATION.join('?|')}?`, 'i'),\n    alias: 'number',\n  },\n  builtin: new RegExp(`\\\\b(?:${functionTokens.map((f) => f.text).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n  },\n  keyword: new RegExp(`\\\\b(?:${KEYWORDS.join('|')}|${operatorTokens.map((f) => f.text).join('|')}|\\\\*)\\\\b`, 'i'),\n  boolean: /\\b(?:true|false)\\b/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /-|\\+|\\*|\\/|>|<|==|<=?|>=?|<>|!~|~|=|\\|/,\n  punctuation: /[{};(),.:]/,\n  variable: /(\\[\\[(.+?)\\]\\])|(\\$(.+?))\\b/,\n};\n\ntokenizer['function-context'].inside = {\n  argument: {\n    pattern: /[a-z0-9_]+(?=:)/i,\n    alias: 'symbol',\n  },\n  duration: tokenizer.duration,\n  number: tokenizer.number,\n  builtin: tokenizer.builtin,\n  string: tokenizer.string,\n  variable: tokenizer.variable,\n};\n\n// console.log(tokenizer.builtin);\n\nexport default tokenizer;\n\n// function escapeRegExp(str: string): string {\n//   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n// }\n","import { debounce, map } from 'lodash';\nimport Plain from 'slate-plain-serializer';\n\nimport QueryField from './query_field';\nimport { DOMUtil } from '@grafana/ui';\nimport { Editor as CoreEditor } from 'slate';\n\nimport { KEYWORDS, functionTokens, operatorTokens, grafanaMacros } from './kusto/kusto';\n// import '../sass/editor.base.scss';\n\nconst TYPEAHEAD_DELAY = 100;\n\ninterface Suggestion {\n  text: string;\n  deleteBackwards?: number;\n  type?: string;\n}\n\ninterface SuggestionGroup {\n  label: string;\n  items: Suggestion[];\n  prefixMatch?: boolean;\n  skipFilter?: boolean;\n}\n\ninterface KustoSchema {\n  Databases: {\n    Default: KustoDBSchema;\n  };\n  Plugins?: any[];\n}\n\ninterface KustoDBSchema {\n  Name?: string;\n  Functions?: any;\n  Tables?: any;\n}\n\nconst defaultSchema: any = () => ({\n  Databases: {\n    Default: {},\n  },\n});\n\nconst cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\nconst wrapText = (text: string) => ({ text });\n\nexport default class KustoQueryField extends QueryField {\n  fields: any;\n  events: any;\n  schema: KustoSchema;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n    this.schema = defaultSchema();\n\n    this.onTypeahead = debounce(this.onTypeahead, TYPEAHEAD_DELAY);\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchSchema();\n  }\n\n  onTypeahead = (force = false) => {\n    const selection = window.getSelection();\n\n    if (selection && selection.anchorNode) {\n      const wrapperNode = selection.anchorNode.parentElement;\n      if (wrapperNode === null) {\n        return;\n      }\n      const editorNode = wrapperNode.closest('.slate-query-field');\n      if (!editorNode || this.state.value.isBlurred) {\n        // Not inside this editor\n        return;\n      }\n\n      // DOM ranges\n      const range = selection.getRangeAt(0);\n      const text = selection.anchorNode.textContent;\n      if (text === null) {\n        return;\n      }\n      const offset = range.startOffset;\n      let prefix = cleanText(text.substr(0, offset));\n\n      // Model ranges\n      const modelOffset = this.state.value.anchorOffset;\n      const modelPrefix = this.state.value.anchorText.text.slice(0, modelOffset);\n\n      // Determine candidates by context\n      let suggestionGroups: SuggestionGroup[] = [];\n      const wrapperClasses = wrapperNode.classList;\n      let typeaheadContext: string | null = null;\n\n      // Built-in functions\n      if (wrapperClasses.contains('function-context')) {\n        typeaheadContext = 'context-function';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // where\n      } else if (modelPrefix.match(/(where\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-where';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // summarize by\n      } else if (modelPrefix.match(/(summarize\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize';\n        suggestionGroups = this.getFunctionSuggestions();\n      } else if (modelPrefix.match(/(summarize\\s(.+\\s)?by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // order by, top X by, ... by ...\n      } else if (modelPrefix.match(/(by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // join\n      } else if (modelPrefix.match(/(on\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-join-on';\n        suggestionGroups = this.getColumnSuggestions();\n      } else if (modelPrefix.match(/(join\\s+(\\(\\s+)?(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-join';\n        suggestionGroups = this.getTableSuggestions();\n\n        // distinct\n      } else if (modelPrefix.match(/(distinct\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-distinct';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // database()\n      } else if (modelPrefix.match(/(database\\(\\\"(\\w+)\\\"\\)\\.(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-database-table';\n        const db = this.getDBFromDatabaseFunction(modelPrefix);\n        suggestionGroups = this.getTableSuggestions(db);\n        prefix = prefix.replace('.', '');\n\n        // new\n      } else if (normalizeQuery(Plain.serialize(this.state.value)).match(/^\\s*\\w*$/i)) {\n        typeaheadContext = 'context-new';\n        if (this.schema) {\n          suggestionGroups = this.getInitialSuggestions();\n        } else {\n          this.fetchSchema();\n          setTimeout(this.onTypeahead, 0);\n          return;\n        }\n\n        // built-in\n      } else if (prefix && !wrapperClasses.contains('argument') && !force) {\n        // Use only last typed word as a prefix for searching\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n          return;\n        }\n        prefix = getLastWord(prefix);\n        typeaheadContext = 'context-builtin';\n        suggestionGroups = this.getKeywordSuggestions();\n      } else if (force === true) {\n        typeaheadContext = 'context-builtin-forced';\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n        }\n        suggestionGroups = this.getKeywordSuggestions();\n      }\n\n      let results = 0;\n      prefix = prefix.toLowerCase();\n      const filteredSuggestions = suggestionGroups\n        .map((group) => {\n          if (group.items && prefix && !group.skipFilter) {\n            group.items = group.items.filter((c) => c.text.length >= prefix.length);\n            if (group.prefixMatch) {\n              group.items = group.items.filter((c) => c.text.toLowerCase().indexOf(prefix) === 0);\n            } else {\n              group.items = group.items.filter((c) => c.text.toLowerCase().indexOf(prefix) > -1);\n            }\n          }\n          results += group.items.length;\n          return group;\n        })\n        .filter((group) => group.items.length > 0);\n\n      // console.log('onTypeahead', selection.anchorNode, wrapperClasses, text, offset, prefix, typeaheadContext);\n      // console.log('onTypeahead', prefix, typeaheadContext, force);\n\n      this.setState({\n        typeaheadPrefix: prefix,\n        typeaheadContext,\n        typeaheadText: text,\n        suggestions: results > 0 ? filteredSuggestions : [],\n      });\n    }\n  };\n\n  applyTypeahead = (editor: CoreEditor, suggestion: { text: any; type: string; deleteBackwards: any }): CoreEditor => {\n    const { typeaheadPrefix, typeaheadContext, typeaheadText } = this.state;\n    let suggestionText = suggestion.text || suggestion;\n    const move = 0;\n\n    // Modify suggestion based on context\n\n    const nextChar = DOMUtil.getNextCharacter();\n    if (suggestion.type === 'function') {\n      if (!nextChar || nextChar !== '(') {\n        suggestionText += '(';\n      }\n    } else if (typeaheadContext === 'context-function') {\n      if (!nextChar || nextChar !== ')') {\n        suggestionText += ')';\n      }\n    } else {\n      if (!nextChar || nextChar !== ' ') {\n        suggestionText += ' ';\n      }\n    }\n\n    // Remove the current, incomplete text and replace it with the selected suggestion\n    const backward = suggestion.deleteBackwards || typeaheadPrefix.length;\n    const text = cleanText(typeaheadText);\n    const suffixLength = text.length - typeaheadPrefix.length;\n    const offset = typeaheadText.indexOf(typeaheadPrefix);\n    const midWord = typeaheadPrefix && ((suffixLength > 0 && offset > -1) || suggestionText === typeaheadText);\n    const forward = midWord ? suffixLength + offset : 0;\n\n    this.resetTypeahead(() =>\n      editor.deleteBackward(backward).deleteForward(forward).insertText(suggestionText).moveForward(move).focus()\n    );\n\n    return editor;\n  };\n\n  // private _getFieldsSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterFromSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       skipFilter: true,\n  //       label: 'Events',\n  //       items: this.events.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables\n  //         .map(wrapText)\n  //         .map(suggestion => {\n  //           suggestion.deleteBackwards = 0;\n  //           return suggestion;\n  //         })\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterSelectSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Functions',\n  //       items: FUNCTIONS.map((s: any) => { s.type = 'function'; return s; })\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  private getInitialSuggestions(): SuggestionGroup[] {\n    return this.getTableSuggestions();\n  }\n\n  private getKeywordSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Keywords',\n        items: KEYWORDS.map(wrapText),\n      },\n      {\n        prefixMatch: true,\n        label: 'Operators',\n        items: operatorTokens,\n      },\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Tables',\n        items: map(this.schema.Databases.Default.Tables, (t: any) => ({ text: t.Name })),\n      },\n    ];\n  }\n\n  private getFunctionSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n    ];\n  }\n\n  getTableSuggestions(db = 'Default'): SuggestionGroup[] {\n    // @ts-ignore\n    if (this.schema.Databases[db]) {\n      return [\n        {\n          prefixMatch: true,\n          label: 'Tables',\n          // @ts-ignore\n          items: map(this.schema.Databases[db].Tables, (t: any) => ({ text: t.Name })),\n        },\n      ];\n    } else {\n      return [];\n    }\n  }\n\n  private getColumnSuggestions(): SuggestionGroup[] {\n    const table = this.getTableFromContext();\n    if (table) {\n      const tableSchema = this.schema.Databases.Default.Tables[table];\n      if (tableSchema) {\n        return [\n          {\n            prefixMatch: true,\n            label: 'Fields',\n            items: map(tableSchema.OrderedColumns, (f: any) => ({\n              text: f.Name,\n              hint: f.Type,\n            })),\n          },\n        ];\n      }\n    }\n    return [];\n  }\n\n  private getTableFromContext() {\n    const query = Plain.serialize(this.state.value);\n    const tablePattern = /^\\s*(\\w+)\\s*|/g;\n    const normalizedQuery = normalizeQuery(query);\n    const match = tablePattern.exec(normalizedQuery);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private getDBFromDatabaseFunction(prefix: string) {\n    const databasePattern = /database\\(\\\"(\\w+)\\\"\\)/gi;\n    const match = databasePattern.exec(prefix);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return undefined;\n    }\n  }\n\n  private async fetchSchema() {\n    let schema = await this.props.getSchema();\n    if (schema) {\n      if (schema.Type === 'AppInsights') {\n        schema = castSchema(schema);\n      }\n      this.schema = schema;\n    } else {\n      this.schema = defaultSchema();\n    }\n  }\n}\n\n/**\n * Cast schema from App Insights to default Kusto schema\n */\nfunction castSchema(schema: any) {\n  const defaultSchemaTemplate = defaultSchema();\n  defaultSchemaTemplate.Databases.Default = schema;\n  return defaultSchemaTemplate;\n}\n\nfunction normalizeQuery(query: string): string {\n  const commentPattern = /\\/\\/.*$/gm;\n  let normalizedQuery = query.replace(commentPattern, '');\n  normalizedQuery = normalizedQuery.replace('\\n', ' ');\n  return normalizedQuery;\n}\n\nfunction getLastWord(str: string): string {\n  const lastWordPattern = /(?:.*\\s)?([^\\s]+\\s*)$/gi;\n  const match = lastWordPattern.exec(str);\n  if (match && match.length > 1) {\n    return match[1];\n  }\n  return '';\n}\n","import KustoQueryField from './KustoQueryField';\nimport Kusto from './kusto/kusto';\n\nimport React, { Component } from 'react';\nimport coreModule from 'app/core/core_module';\n\ninterface EditorProps {\n  index: number;\n  placeholder?: string;\n  change: (value: string, index: number) => void;\n  variables: () => string[] | string[];\n  getSchema?: () => Promise<any>;\n  execute?: () => void;\n  query?: string;\n}\n\nclass Editor extends Component<EditorProps, any> {\n  static defaultProps = {\n    placeholder: 'Enter a query',\n  };\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      edited: false,\n      query: props.query || '',\n    };\n  }\n\n  onChangeQuery = (value: any) => {\n    const { index, change } = this.props;\n    const { query } = this.state;\n    const edited = query !== value;\n    this.setState({ edited, query: value });\n    if (change) {\n      change(value, index);\n    }\n  };\n\n  onPressEnter = () => {\n    const { execute } = this.props;\n    if (execute) {\n      execute();\n    }\n  };\n\n  render() {\n    const { variables, getSchema, placeholder } = this.props;\n    const { edited, query } = this.state;\n\n    return (\n      <div className=\"gf-form-input\" style={{ height: 'auto' }}>\n        <KustoQueryField\n          initialQuery={edited ? null : query}\n          onPressEnter={this.onPressEnter}\n          onQueryChange={this.onChangeQuery}\n          prismLanguage=\"kusto\"\n          prismDefinition={Kusto}\n          placeholder={placeholder}\n          templateVariables={variables}\n          getSchema={getSchema}\n        />\n      </div>\n    );\n  }\n}\n\ncoreModule.directive('kustoEditor', [\n  'reactDirective',\n  (reactDirective) => {\n    return reactDirective(Editor, [\n      'change',\n      'database',\n      'execute',\n      'query',\n      'variables',\n      'placeholder',\n      ['getSchema', { watchDepth: 'reference' }],\n    ]);\n  },\n]);\n","export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n    );\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n          metricNamespace\n        )}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n        metricNamespace\n      )}`\n    );\n  }\n}\n","import { find, get } from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorLocalizedValue,\n  AzureMonitorMetricAvailabilityMetadata,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorOption,\n} from '../types';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        const value = get(result.data.value[i], valueFieldName);\n        const text = get(result.data.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (result.data.value[i].type === metricDefinition) {\n        list.push({\n          text: result.data.value[i].name,\n          value: result.data.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: AzureMonitorMetricsMetadataResponse, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n    const metricData = result?.value.find((v) => v.name.value === metricName);\n\n    if (!metricData) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n\n      supportedTimeGrains: [\n        { label: 'Auto', value: 'auto' },\n        ...ResponseParser.parseTimeGrains(metricData.metricAvailabilities ?? []),\n      ],\n      dimensions: ResponseParser.parseDimensions(metricData.dimensions ?? []),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: AzureMonitorMetricAvailabilityMetadata[]): AzureMonitorOption[] {\n    const timeGrains: AzureMonitorOption[] = [];\n\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach((avail) => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          label: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n\n    return timeGrains;\n  }\n\n  static parseDimensions(metadataDimensions: AzureMonitorLocalizedValue[]) {\n    return metadataDimensions.map((dimension) => {\n      return {\n        label: dimension.localizedValue || dimension.value,\n        value: dimension.value,\n      };\n    });\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.data.value[i], textFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${get(result.data.value[i], textFieldName)} - ${get(result.data.value[i], valueFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'customerId';\n    const textFieldName = 'name';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i].properties, valueFieldName)])) {\n        list.push({\n          label: get(result.data.value[i], textFieldName),\n          value: get(result.data.value[i].properties, valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.AppConfiguration/configurationStores',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.Network/natGateways',\n      'Microsoft.Network/vpngateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.SignalRService/SignalR',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","import { filter, startsWith } from 'lodash';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMetricQuery,\n  DatasourceValidationResult,\n} from '../types';\nimport {\n  DataSourceInstanceSettings,\n  ScopedVars,\n  MetricFindValue,\n  DataQueryResponse,\n  DataQueryRequest,\n  TimeRange,\n} from '@grafana/data';\nimport { getBackendSrv, DataSourceWithBackend, getTemplateSrv, FetchResponse } from '@grafana/runtime';\nimport { from, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport { getManagementApiRoute } from '../api/routes';\nimport { resourceTypeDisplayNames } from '../azureMetadata';\n\nconst defaultDropdownValue = 'select';\n\n// Used to convert our aggregation value to the Azure enum for deep linking\nconst aggregationTypeMap: Record<string, number> = {\n  None: 0,\n  Total: 1,\n  Minimum: 2,\n  Maximum: 3,\n  Average: 4,\n  Count: 7,\n};\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  defaultSubscriptionId?: string;\n  baseUrl: string;\n  azurePortalUrl: string;\n  resourceGroup: string;\n  resourceName: string;\n  url: string;\n  supportedMetricNamespaces: string[] = [];\n  timeSrv: TimeSrv;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.timeSrv = getTimeSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    const route = getManagementApiRoute(cloud);\n    this.baseUrl = `/${route}/subscriptions`;\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.url = instanceSettings.url!;\n    this.supportedMetricNamespaces = new SupportedNamespaces(cloud).get();\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!(\n      item.hide !== true &&\n      item.azureMonitor.resourceGroup &&\n      item.azureMonitor.resourceGroup !== defaultDropdownValue &&\n      item.azureMonitor.resourceName &&\n      item.azureMonitor.resourceName !== defaultDropdownValue &&\n      item.azureMonitor.metricDefinition &&\n      item.azureMonitor.metricDefinition !== defaultDropdownValue &&\n      item.azureMonitor.metricName &&\n      item.azureMonitor.metricName !== defaultDropdownValue &&\n      item.azureMonitor.aggregation &&\n      item.azureMonitor.aggregation !== defaultDropdownValue\n    );\n  }\n\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const metricQueries = request.targets.reduce((prev: Record<string, AzureMonitorQuery>, cur) => {\n      prev[cur.refId] = cur;\n      return prev;\n    }, {});\n\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res, metricQueries));\n      })\n    );\n  }\n\n  async processResponse(\n    res: DataQueryResponse,\n    metricQueries: Record<string, AzureMonitorQuery>\n  ): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const metricQuery = metricQueries[df.refId];\n        if (metricQuery && metricQuery.azureMonitor) {\n          const url = this.buildAzurePortalUrl(\n            metricQuery.azureMonitor,\n            metricQuery.subscription,\n            this.timeSrv.timeRange()\n          );\n\n          for (const field of df.fields) {\n            field.config.links = [\n              {\n                url: url,\n                title: 'View in Azure Portal',\n                targetBlank: true,\n              },\n            ];\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  stringifyAzurePortalUrlParam(value: string | object): string {\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    return encodeURIComponent(stringValue);\n  }\n\n  buildAzurePortalUrl(metricQuery: AzureMetricQuery, subscriptionId: string, timeRange: TimeRange) {\n    const aggregationType =\n      (metricQuery.aggregation && aggregationTypeMap[metricQuery.aggregation]) ?? aggregationTypeMap.Average;\n\n    const chartDef = this.stringifyAzurePortalUrlParam({\n      v2charts: [\n        {\n          metrics: [\n            {\n              resourceMetadata: {\n                id: `/subscriptions/${subscriptionId}/resourceGroups/${metricQuery.resourceGroup}/providers/${metricQuery.metricDefinition}/${metricQuery.resourceName}`,\n              },\n              name: metricQuery.metricName,\n              aggregationType: aggregationType,\n              namespace: metricQuery.metricNamespace,\n              metricVisualization: {\n                displayName: metricQuery.metricName,\n                resourceDisplayName: metricQuery.resourceName,\n              },\n            },\n          ],\n        },\n      ],\n    });\n\n    const timeContext = this.stringifyAzurePortalUrlParam({\n      absolute: {\n        startTime: timeRange.from,\n        endTime: timeRange.to,\n      },\n    });\n\n    return `${this.azurePortalUrl}/#blade/Microsoft_Azure_MonitoringMetrics/Metrics.ReactView/Referer/MetricsExplorer/TimeContext/${timeContext}/ChartDefinition/${chartDef}`;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.azureMonitor;\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionFilters = item.dimensionFilters\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filter = templateSrv.replace(f.filter ?? '', scopedVars);\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filter: filter || '*', // send * when empty\n        };\n      });\n\n    return {\n      refId: target.refId,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace:\n          metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionFilters,\n        top: top || '10',\n        alias: item.alias,\n        format: target.format,\n      },\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> | null {\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\n    if (subscriptionsQuery) {\n      return this.getSubscriptions();\n    }\n\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery && this.defaultSubscriptionId) {\n      return this.getResourceGroups(this.defaultSubscriptionId);\n    }\n\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (resourceGroupsQueryWithSub) {\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery && this.defaultSubscriptionId) {\n      if (!metricDefinitionsQuery[3]) {\n        return this.getMetricDefinitions(this.defaultSubscriptionId, this.toVariable(metricDefinitionsQuery[1]));\n      }\n    }\n\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricDefinitionsQueryWithSub) {\n      return this.getMetricDefinitions(\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\n        this.toVariable(metricDefinitionsQueryWithSub[2])\n      );\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery && this.defaultSubscriptionId) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(this.defaultSubscriptionId, resourceGroup, metricDefinition);\n    }\n\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n    if (resourceNamesQueryWithSub) {\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\n    }\n\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamespaceQuery && this.defaultSubscriptionId) {\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\n      return this.getMetricNamespaces(this.defaultSubscriptionId, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamespaceQueryWithSub = query.match(\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\n    );\n    if (metricNamespaceQueryWithSub) {\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamesQuery && this.defaultSubscriptionId) {\n      if (metricNamesQuery[3].indexOf(',') === -1) {\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\n        const resourceName = this.toVariable(metricNamesQuery[3]);\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\n        return this.getMetricNames(\n          this.defaultSubscriptionId,\n          resourceGroup,\n          metricDefinition,\n          resourceName,\n          metricNamespace\n        );\n      }\n    }\n\n    const metricNamesQueryWithSub = query.match(\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\n    );\n\n    if (metricNamesQueryWithSub) {\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\n    }\n\n    return null;\n  }\n\n  toVariable(metric: string) {\n    return getTemplateSrv().replace((metric || '').trim());\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const url = `${this.baseUrl}?api-version=2019-03-01`;\n    return await this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`;\n    return this.doRequest(url).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`;\n    return this.doRequest(url)\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result) => {\n        return filter(result, (t) => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result.map((v) => ({\n          value: v.value,\n          text: resourceTypeDisplayNames[v.value.toLowerCase()] || v.value,\n        }));\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`;\n\n    return this.doRequest(url).then((result: any) => {\n      if (!startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest<AzureMonitorMetricsMetadataResponse>(url).then((result) => {\n      return ResponseParser.parseMetadata(result.data, metricName);\n    });\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return Promise.resolve(validationError);\n    }\n\n    try {\n      const url = `${this.baseUrl}?api-version=2019-03-01`;\n\n      return await this.doRequest(url).then<DatasourceValidationResult>((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Monitor service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Monitor: ';\n      message += e.statusText ? e.statusText + ': ' : '';\n\n      if (e.data && e.data.error && e.data.error.code) {\n        message += e.data.error.code + '. ' + e.data.error.message;\n      } else if (e.data && e.data.error) {\n        message += e.data.error;\n      } else if (e.data) {\n        message += e.data;\n      } else {\n        message += 'Cannot connect to Azure Monitor REST API.';\n      }\n      return {\n        status: 'error',\n        message: message,\n      };\n    }\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n  doRequest<T = any>(url: string, maxRetries = 1): Promise<FetchResponse<T>> {\n    return getBackendSrv()\n      .datasourceRequest<T>({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest<T>(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import { concat, filter, find, forEach, indexOf, intersection, isObject, map, without, keys as _keys } from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.data.Tables[0].Columns;\n        const rows = this.results[i].result.data.Tables[0].Rows;\n        data = concat(data, this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton));\n      } else {\n        const value = this.results[i].result.data.value;\n        const alias = this.results[i].query.alias;\n        data = concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = map(columns, (column) => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    forEach(yaxisesSplit, (yaxis) => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    forEach(rows, (row) => {\n      forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _keys(obj);\n    return indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _keys(segment);\n\n    return filter(without(keys, 'start', 'end'), (key) => {\n      return isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _keys(dataObj);\n    return intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { data: { metrics: any } }) {\n    const keys = _keys(result.data.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.data.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results.data && this.results.data.Tables) {\n      for (let i = 0; i < this.results.data.Tables[0].Rows.length; i++) {\n        const column = this.results.data.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import { DataQueryRequest, DataSourceInstanceSettings, ScopedVars, MetricFindValue } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport { isString } from 'lodash';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType, DatasourceValidationResult } from '../types';\nimport ResponseParser from './response_parser';\nimport { getAzureCloud } from '../credentials';\nimport { getAppInsightsApiRoute } from '../api/routes';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\n\nexport default class AppInsightsDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  url: string;\n  baseUrl: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId || '';\n\n    const cloud = getAzureCloud(instanceSettings);\n    const route = getAppInsightsApiRoute(cloud);\n    this.baseUrl = `/${route}/${this.version}/apps/${this.applicationId}`;\n\n    this.url = instanceSettings.url || '';\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    if (item.xaxis && !item.timeColumn) {\n      item.timeColumn = item.xaxis;\n    }\n\n    if (item.yaxis && !item.valueColumn) {\n      item.valueColumn = item.yaxis;\n    }\n\n    if (item.spliton && !item.segmentColumn) {\n      item.segmentColumn = item.spliton;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: true,\n        rawQueryString: getTemplateSrv().replace(item.rawQueryString, options.scopedVars),\n        timeColumn: item.timeColumn,\n        valueColumn: item.valueColumn,\n        segmentColumn: item.segmentColumn,\n      },\n    };\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.appInsights!;\n\n    const old: any = item;\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (old.timeGrainCount) {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(old.timeGrainCount, item.timeGrainUnit);\n    } else if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    // migration for non-standard names\n    if (old.groupBy && !item.dimension) {\n      item.dimension = [old.groupBy];\n    }\n    if (old.filter && !item.dimensionFilter) {\n      item.dimensionFilter = old.filter;\n    }\n\n    // Migrate single dimension string to array\n    if (isString(item.dimension)) {\n      if (item.dimension === 'None') {\n        item.dimension = [];\n      } else {\n        item.dimension = [item.dimension as string];\n      }\n    }\n    if (!item.dimension) {\n      item.dimension = [];\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    return {\n      type: 'timeSeriesQuery',\n      refId: target.refId,\n      format: target.format,\n      queryType: AzureQueryType.ApplicationInsights,\n      appInsights: {\n        timeGrain: templateSrv.replace((item.timeGrain || '').toString(), scopedVars),\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        aggregation: templateSrv.replace(item.aggregation, scopedVars),\n        dimension: item.dimension.map((d) => templateSrv.replace(d, scopedVars)),\n        dimensionFilter: templateSrv.replace(item.dimensionFilter, scopedVars),\n        alias: item.alias,\n        format: target.format,\n      },\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> | null {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(getTemplateSrv().replace(metricName));\n    }\n\n    return null;\n  }\n\n  testDatasource(): Promise<DatasourceValidationResult> {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url)\n      .then<DatasourceValidationResult>((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Application Insights service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Application Insights: Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  doRequest(url: any, maxRetries = 1): Promise<any> {\n    return getBackendSrv()\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  getMetricNames() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const url = `${this.baseUrl}/query/schema`;\n    return this.doRequest(url).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map((v) => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import { concat, find, flattenDeep, forEach, get, map } from 'lodash';\nimport { AnnotationEvent, dateTime, TimeSeries } from '@grafana/data';\nimport { AzureLogsTableData, AzureLogsVariable } from '../types';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\n\nexport default class ResponseParser {\n  columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.data.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.data.tables[0].columns;\n      const rows = this.results[i].result.data.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    forEach(rows, (row) => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        executedQueryString: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: map(columns, (col) => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        executedQueryString: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    forEach(queryResult, (result) => {\n      forEach(flattenDeep(result.rows), (row) => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    forEach(queryResult, (result) => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      forEach(result.rows, (row) => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!find(list, ['value', get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          text: `${get(result.data.value[i], textFieldName)}`,\n          value: get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n\n// matches (name):(type) = (defaultValue)\n// e.g. fromRangeStart:datetime = datetime(null)\n//  - name: fromRangeStart\n//  - type: datetime\n//  - defaultValue: datetime(null)\nconst METADATA_FUNCTION_PARAMS = /([\\w\\W]+):([\\w]+)(?:\\s?=\\s?([\\w\\W]+))?/;\n\nfunction transformMetadataFunction(sourceSchema: AzureLogAnalyticsMetadata) {\n  if (!sourceSchema.functions) {\n    return [];\n  }\n\n  return sourceSchema.functions.map((fn) => {\n    const params =\n      fn.parameters &&\n      fn.parameters\n        .split(', ')\n        .map((arg) => {\n          const match = arg.match(METADATA_FUNCTION_PARAMS);\n          if (!match) {\n            return;\n          }\n\n          const [, name, type, defaultValue] = match;\n\n          return {\n            name,\n            type,\n            defaultValue,\n            cslDefaultValue: defaultValue,\n          };\n        })\n        .filter(<T>(v: T): v is Exclude<T, undefined> => !!v);\n\n    return {\n      name: fn.name,\n      body: fn.body,\n      inputParameters: params || [],\n    };\n  });\n}\n\nexport function transformMetadataToKustoSchema(sourceSchema: AzureLogAnalyticsMetadata, nameOrIdOrSomething: string) {\n  const database = {\n    name: nameOrIdOrSomething,\n    tables: sourceSchema.tables,\n    functions: transformMetadataFunction(sourceSchema),\n    majorVersion: 0,\n    minorVersion: 0,\n  };\n\n  return {\n    clusterType: 'Engine',\n    cluster: {\n      connectionString: nameOrIdOrSomething,\n      databases: [database],\n    },\n    database: database,\n  };\n}\n","import { map } from 'lodash';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  ScopedVars,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n} from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, DataSourceWithBackend, FetchResponse } from '@grafana/runtime';\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { getAuthType, getAzureCloud, isLogAnalyticsSameAs, getAzurePortalUrl } from '../credentials';\nimport { getLogAnalyticsApiRoute, getLogAnalyticsManagementApiRoute } from '../api/routes';\nimport { AzureLogAnalyticsMetadata } from '../types/logAnalyticsMetadata';\nimport { isGUIDish } from '../components/ResourcePicker/utils';\n\ninterface AdhocQuery {\n  datasourceId: number;\n  url: string;\n  resultFormat: string;\n}\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  url: string;\n  baseUrl: string;\n  azurePortalUrl: string;\n  applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorUrl: string;\n  defaultOrFirstWorkspace: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    const cloud = getAzureCloud(instanceSettings);\n    const logAnalyticsRoute = getLogAnalyticsApiRoute(cloud);\n    this.baseUrl = `/${logAnalyticsRoute}`;\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    const managementRoute = getLogAnalyticsManagementApiRoute(cloud);\n    this.azureMonitorUrl = `/${managementRoute}/subscriptions`;\n\n    this.url = instanceSettings.url || '';\n\n    const sameAsMonitor = isLogAnalyticsSameAs(instanceSettings);\n\n    this.defaultSubscriptionId = sameAsMonitor\n      ? instanceSettings.jsonData.subscriptionId\n      : instanceSettings.jsonData.logAnalyticsSubscriptionId;\n\n    this.defaultOrFirstWorkspace = this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const url = `${this.azureMonitorUrl}?api-version=2019-03-01`;\n    return await this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.data.value, (val: any) => {\n        return { text: val.name, value: val.id };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorUrl +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.doRequest(workspaceListUrl, true);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const url = `${this.baseUrl}/v1${resourceUri}/metadata`;\n\n    const resp = await this.doRequest<AzureLogAnalyticsMetadata>(url);\n    if (!resp.ok) {\n      throw new Error('Unable to get metadata for workspace');\n    }\n\n    return resp.data;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const metadata = await this.getMetadata(resourceUri);\n    return transformMetadataToKustoSchema(metadata, resourceUri);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.azureLogAnalytics;\n\n    const templateSrv = getTemplateSrv();\n    const resource = templateSrv.replace(item.resource, scopedVars);\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resource && this.defaultOrFirstWorkspace) {\n      workspace = this.defaultOrFirstWorkspace;\n    }\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const query = templateSrv.replace(item.query, scopedVars, this.interpolateVariable);\n\n    return {\n      refId: target.refId,\n      format: target.format,\n      queryType: AzureQueryType.LogAnalytics,\n      subscriptionId: subscriptionId,\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query: query,\n        resource,\n\n        // TODO: Workspace is deprecated and should be migrated to Resources\n        workspace: workspace,\n      },\n    };\n  }\n\n  /**\n   * Augment the results with links back to the azure console\n   */\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res));\n      })\n    );\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(customMeta: Record<string, any>) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const workspaceId = customMeta.workspace;\n    const subscription = customMeta.subscription;\n\n    const details = await this.getWorkspaceDetails(workspaceId);\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url =\n      `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` +\n      `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n\n    const details = response.data.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  /**\n   * This is named differently than DataSourceApi.metricFindQuery\n   * because it's not exposed to Grafana like the main AzureMonitorDataSource.\n   * And some of the azure internal data sources return null in this function, which the\n   * external interface does not support\n   */\n  metricFindQueryInternal(query: string): Promise<MetricFindValue[]> {\n    // workspaces() - Get workspaces in the default subscription\n    const workspacesQuery = query.match(/^workspaces\\(\\)/i);\n    if (workspacesQuery) {\n      if (this.defaultSubscriptionId) {\n        return this.getWorkspaces(this.defaultSubscriptionId);\n      } else {\n        throw new Error(\n          'No subscription ID. Specify a default subscription ID in the data source config to use workspaces() without a subscription ID'\n        );\n      }\n    }\n\n    // workspaces(\"abc-def-etc\") - Get workspaces a specified subscription\n    const workspacesQueryWithSub = query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i);\n    if (workspacesQueryWithSub) {\n      return this.getWorkspaces((workspacesQueryWithSub[1] || '').trim());\n    }\n\n    // Execute the query as KQL to the default or first workspace\n    return this.getDefaultOrFirstWorkspace().then((resourceURI) => {\n      if (!resourceURI) {\n        return [];\n      }\n\n      const queries = this.buildQuery(query, null, resourceURI);\n      const promises = this.doQueries(queries);\n\n      return Promise.all(promises)\n        .then((results) => {\n          return new ResponseParser(results).parseToVariables();\n        })\n        .catch((err) => {\n          if (\n            err.error &&\n            err.error.data &&\n            err.error.data.error &&\n            err.error.data.error.innererror &&\n            err.error.data.error.innererror.innererror\n          ) {\n            throw { message: err.error.data.error.innererror.innererror.message };\n          } else if (err.error && err.error.data && err.error.data.error) {\n            throw { message: err.error.data.error.message };\n          }\n\n          throw err;\n        });\n    }) as Promise<MetricFindValue[]>;\n  }\n\n  private buildQuery(query: string, options: any, workspace: string): AdhocQuery[] {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, this.interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n\n    const querystring = querystringBuilder.generate().uriString;\n    const url = isGUIDish(workspace)\n      ? `${this.baseUrl}/v1/workspaces/${workspace}/query?${querystring}`\n      : `${this.baseUrl}/v1${workspace}/query?${querystring}`;\n\n    const queries = [\n      {\n        datasourceId: this.id,\n        url: url,\n        resultFormat: 'table',\n      },\n    ];\n\n    return queries;\n  }\n\n  interpolateVariable(value: string, variable: { multi: any; includeAll: any }) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = map(value, (val) => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getDefaultOrFirstWorkspace(): Promise<string | undefined> {\n    if (this.defaultOrFirstWorkspace) {\n      return this.defaultOrFirstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.defaultOrFirstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then((results) => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: AdhocQuery[]) {\n    return map(queries, (query) => {\n      return this.doRequest(query.url)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  async doRequest<T = any>(url: string, useCache = false, maxRetries = 1): Promise<FetchResponse<T>> {\n    try {\n      if (useCache && this.cache.has(url)) {\n        return this.cache.get(url);\n      }\n\n      const res = await getBackendSrv().datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      });\n\n      if (useCache) {\n        this.cache.set(url, res);\n      }\n\n      return res;\n    } catch (error) {\n      if (maxRetries > 0) {\n        return this.doRequest(url, useCache, maxRetries - 1);\n      }\n\n      throw error;\n    }\n  }\n\n  // TODO: update to be completely resource-centric\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const validationError = this.validateDatasource();\n    if (validationError) {\n      return validationError;\n    }\n\n    let resourceOrWorkspace: string;\n    try {\n      const result = await this.getDefaultOrFirstWorkspace();\n      if (!result) {\n        return {\n          status: 'error',\n          message: 'Workspace not found.',\n        };\n      }\n      resourceOrWorkspace = result;\n    } catch (e) {\n      let message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n\n    try {\n      const url = isGUIDish(resourceOrWorkspace)\n        ? `${this.baseUrl}/v1/workspaces/${resourceOrWorkspace}/metadata`\n        : `${this.baseUrl}/v1${resourceOrWorkspace}/metadata`;\n\n      return await this.doRequest(url).then<DatasourceValidationResult>((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Log Analytics service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      });\n    } catch (e) {\n      let message = 'Azure Log Analytics: ';\n      return {\n        status: 'error',\n        message: this.getErrorMessage(message, e),\n      };\n    }\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsTenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsClientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n","import { ScopedVars, DataSourceInstanceSettings } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from '../types';\nimport AppInsightsDatasource from '../app_insights/app_insights_datasource';\n\nexport default class InsightsAnalyticsDatasource extends AppInsightsDatasource {\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.insightsAnalytics;\n\n    // Old name migrations\n    const old: any = item;\n    if (old.rawQueryString && !item.query) {\n      item.query = old.rawQueryString;\n    }\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.InsightsAnalytics,\n      insightsAnalytics: {\n        query: getTemplateSrv().replace(item.query, scopedVars),\n        resultFormat: item.resultFormat,\n      },\n    };\n  }\n}\n","// eslint-disable-next-line lodash/import-scope\nimport _ from 'lodash';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType } from '../types';\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\n\nexport default class AzureResourceGraphDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return !!item.azureResourceGraph?.query;\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.azureResourceGraph;\n\n    const templateSrv = getTemplateSrv();\n\n    const query = templateSrv.replace(item.query, scopedVars, this.interpolateVariable);\n\n    return {\n      refId: target.refId,\n      format: target.format,\n      queryType: AzureQueryType.AzureResourceGraph,\n      subscriptions: target.subscriptions,\n      azureResourceGraph: {\n        resultFormat: 'table',\n        query,\n      },\n    };\n  }\n\n  interpolateVariable(value: string, variable: { multi: any; includeAll: any }) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, (val) => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n}\n","import { cloneDeep, upperFirst } from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n  InsightsAnalyticsQuery,\n} from './types';\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport InsightsAnalyticsDatasource from './insights_analytics/insights_analytics_datasource';\nimport { migrateMetricsDimensionFilters } from './query_ctrl';\nimport { map } from 'rxjs/operators';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport { getAzureCloud } from './credentials';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n  /** @deprecated */\n  appInsightsDatasource?: AppInsightsDatasource;\n  /** @deprecated */\n  insightsAnalyticsDatasource?: InsightsAnalyticsDatasource;\n\n  pseudoDatasource: Record<AzureQueryType, DataSourceWithBackend>;\n  optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings);\n\n    const pseudoDatasource: any = {};\n    pseudoDatasource[AzureQueryType.AzureMonitor] = this.azureMonitorDatasource;\n    pseudoDatasource[AzureQueryType.LogAnalytics] = this.azureLogAnalyticsDatasource;\n    pseudoDatasource[AzureQueryType.AzureResourceGraph] = this.azureResourceGraphDatasource;\n\n    const cloud = getAzureCloud(instanceSettings);\n    if (cloud === 'azuremonitor' || cloud === 'chinaazuremonitor') {\n      // AppInsights and InsightAnalytics are only supported for Public and Azure China clouds\n      this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings);\n      this.insightsAnalyticsDatasource = new InsightsAnalyticsDatasource(instanceSettings);\n      pseudoDatasource[AzureQueryType.ApplicationInsights] = this.appInsightsDatasource;\n      pseudoDatasource[AzureQueryType.InsightsAnalytics] = this.insightsAnalyticsDatasource;\n    }\n    this.pseudoDatasource = pseudoDatasource;\n\n    const optionsKey: any = {};\n    optionsKey[AzureQueryType.ApplicationInsights] = 'appInsights';\n    optionsKey[AzureQueryType.AzureMonitor] = 'azureMonitor';\n    optionsKey[AzureQueryType.InsightsAnalytics] = 'insightsAnalytics';\n    optionsKey[AzureQueryType.LogAnalytics] = 'azureLogAnalytics';\n    optionsKey[AzureQueryType.AzureResourceGraph] = 'azureResourceGraph';\n    this.optionsKey = optionsKey;\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const byType = new Map<AzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const target of options.targets) {\n      // Migrate old query structure\n      migrateQuery(target);\n\n      // Check that we have options\n      const opts = (target as any)[this.optionsKey[target.queryType]];\n\n      // Skip hidden queries or ones without properties\n      if (target.hide || !opts) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      return this.pseudoDatasource[queryType].query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource?.metricFindQueryInternal(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQueryInternal(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQueryInternal(query);\n    if (alaResult) {\n      return alaResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async testDatasource(): Promise<DatasourceValidationResult> {\n    const promises: Array<Promise<DatasourceValidationResult>> = [];\n\n    promises.push(this.azureMonitorDatasource.testDatasource());\n    promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n\n    if (this.appInsightsDatasource?.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    return await Promise.all(promises).then((results) => {\n      let status: 'success' | 'error' = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.replaceTemplateVariable(subscriptionId));\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup)\n    );\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition)\n    );\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace)\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName)\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      this.replaceTemplateVariable(subscriptionId),\n      this.replaceTemplateVariable(resourceGroup),\n      this.replaceTemplateVariable(metricDefinition),\n      this.replaceTemplateVariable(resourceName),\n      this.replaceTemplateVariable(metricNamespace),\n      this.replaceTemplateVariable(metricName)\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource?.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource?.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource?.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    return queries.map(\n      (query) => this.pseudoDatasource[query.queryType].applyTemplateVariables(query, scopedVars) as AzureMonitorQuery\n    );\n  }\n\n  replaceTemplateVariable(variable: string) {\n    return this.templateSrv.replace(variable);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n}\n\nfunction migrateQuery(target: AzureMonitorQuery) {\n  if (target.queryType === AzureQueryType.ApplicationInsights) {\n    if ((target.appInsights as any).rawQuery) {\n      target.queryType = AzureQueryType.InsightsAnalytics;\n      target.insightsAnalytics = (target.appInsights as unknown) as InsightsAnalyticsQuery;\n      delete target.appInsights;\n    }\n  }\n  if (!target.queryType) {\n    target.queryType = AzureQueryType.AzureMonitor;\n  }\n\n  if (target.queryType === AzureQueryType.AzureMonitor) {\n    migrateMetricsDimensionFilters(target.azureMonitor);\n  }\n}\n","import { defaultsDeep, find, map, isString } from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport TimegrainConverter from './time_grain_converter';\nimport './editor/editor_component';\n\nimport { TemplateSrv } from '@grafana/runtime';\nimport { auto } from 'angular';\nimport { DataFrame, PanelEvents } from '@grafana/data';\nimport { AzureQueryType, AzureMetricQuery, AzureMonitorQuery } from './types';\nimport { convertTimeGrainsToMs } from './utils/common';\nimport Datasource from './datasource';\n\nexport interface ResultFormat {\n  text: string;\n  value: string;\n}\n\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  defaultDropdownValue = 'select';\n\n  dummyDiminsionString = '+';\n\n  queryQueryTypeOptions = [\n    { id: AzureQueryType.AzureMonitor, label: 'Metrics' },\n    { id: AzureQueryType.LogAnalytics, label: 'Logs' },\n    { id: AzureQueryType.ApplicationInsights, label: 'Application Insights' },\n    { id: AzureQueryType.InsightsAnalytics, label: 'Insights Analytics' },\n    { id: AzureQueryType.AzureResourceGraph, label: 'Azure Resource Graph' },\n  ];\n\n  // Query types that have been migrated to React\n  reactQueryEditors = [\n    AzureQueryType.AzureMonitor,\n    AzureQueryType.LogAnalytics,\n    AzureQueryType.ApplicationInsights,\n    AzureQueryType.InsightsAnalytics,\n    AzureQueryType.AzureResourceGraph,\n  ];\n\n  // target: AzureMonitorQuery;\n\n  declare target: {\n    // should be: AzureMonitorQuery\n    refId: string;\n    queryType: AzureQueryType;\n    subscription: string;\n    subscriptions: string[];\n    azureMonitor: AzureMetricQuery;\n    azureLogAnalytics: {\n      query: string;\n      resultFormat: string;\n      workspace: string;\n    };\n    azureResourceGraph: {\n      query: string;\n      resultFormat: string;\n    };\n    appInsights: {\n      // metric style query when rawQuery == false\n      metricName: string;\n      dimension: any;\n      dimensionFilter: string;\n      dimensions: string[];\n\n      aggOptions: string[];\n      aggregation: string;\n\n      timeGrainType: string;\n      timeGrainCount: string;\n      timeGrainUnit: string;\n      timeGrain: string;\n      timeGrains: Array<{ text: string; value: string }>;\n      allowedTimeGrainsMs: number[];\n    };\n    insightsAnalytics: {\n      query: any;\n      resultFormat: string;\n    };\n  };\n\n  defaults = {\n    queryType: 'Azure Monitor',\n    azureMonitor: {\n      resourceGroup: undefined,\n      metricDefinition: undefined,\n      resourceName: undefined,\n      metricNamespace: undefined,\n      metricName: undefined,\n      dimensionFilter: '*',\n      timeGrain: 'auto',\n      top: '10',\n      aggOptions: [] as string[],\n      timeGrains: [] as string[],\n    },\n    azureLogAnalytics: {\n      query: [\n        '//change this example to create your own time series query',\n        '<table name>                                                              ' +\n          '//the table to query (e.g. Usage, Heartbeat, Perf)',\n        '| where $__timeFilter(TimeGenerated)                                      ' +\n          '//this is a macro used to show the full chart’s time range, choose the datetime column here',\n        '| summarize count() by <group by column>, bin(TimeGenerated, $__interval) ' +\n          '//change “group by column” to a column in your table, such as “Computer”. ' +\n          'The $__interval macro is used to auto-select the time grain. Can also use 1h, 5m etc.',\n        '| order by TimeGenerated asc',\n      ].join('\\n'),\n      resultFormat: 'time_series',\n      workspace:\n        this.datasource && this.datasource.azureLogAnalyticsDatasource\n          ? this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace\n          : '',\n    },\n    azureResourceGraph: {\n      resultFormat: 'table',\n    },\n    appInsights: {\n      metricName: this.defaultDropdownValue,\n      // dimension: [],\n      timeGrain: 'auto',\n    },\n    insightsAnalytics: {\n      query: '',\n      resultFormat: 'time_series',\n    },\n  };\n\n  resultFormats: ResultFormat[];\n  workspaces: any[] = [];\n  showHelp = false;\n  showLastQuery = false;\n  lastQuery = '';\n  lastQueryError?: string;\n  subscriptions: Array<{ text: string; value: string }>;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, private templateSrv: TemplateSrv) {\n    super($scope, $injector);\n\n    defaultsDeep(this.target, this.defaults);\n\n    this.migrateTimeGrains();\n\n    this.migrateToFromTimes();\n\n    this.migrateToDefaultNamespace();\n\n    this.migrateApplicationInsightsKeys();\n\n    this.migrateApplicationInsightsDimensions();\n\n    migrateMetricsDimensionFilters(this.target.azureMonitor);\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n    this.resultFormats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n    this.getSubscriptions();\n    if (this.target.queryType === 'Azure Log Analytics') {\n      this.getWorkspaces();\n    }\n  }\n\n  onDataReceived(dataList: DataFrame[]) {\n    this.lastQueryError = undefined;\n    this.lastQuery = '';\n\n    const anySeriesFromQuery: any = find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery && anySeriesFromQuery.meta) {\n      this.lastQuery = anySeriesFromQuery.meta.query;\n    }\n  }\n\n  onDataError(err: any) {\n    this.handleQueryCtrlError(err);\n  }\n\n  handleQueryCtrlError(err: any) {\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n      return;\n    }\n\n    if (err.error && err.error.data && err.error.data.error && err.error.data.error.innererror) {\n      if (err.error.data.error.innererror.innererror) {\n        this.lastQueryError = err.error.data.error.innererror.innererror.message;\n      } else {\n        this.lastQueryError = err.error.data.error.innererror.message;\n      }\n    } else if (err.error && err.error.data && err.error.data.error) {\n      this.lastQueryError = err.error.data.error.message;\n    } else if (err.error && err.error.data) {\n      this.lastQueryError = err.error.data.message;\n    } else if (err.data && err.data.error) {\n      this.lastQueryError = err.data.error.message;\n    } else if (err.data && err.data.message) {\n      this.lastQueryError = err.data.message;\n    } else {\n      this.lastQueryError = err;\n    }\n  }\n\n  migrateTimeGrains() {\n    if (this.target.azureMonitor.timeGrainUnit) {\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\n        this.target.azureMonitor.timeGrain = TimegrainConverter.createISO8601Duration(\n          this.target.azureMonitor.timeGrain,\n          this.target.azureMonitor.timeGrainUnit\n        );\n      }\n\n      delete this.target.azureMonitor.timeGrainUnit;\n    }\n\n    if (this.target.appInsights.timeGrainUnit) {\n      if (this.target.appInsights.timeGrain !== 'auto') {\n        if (this.target.appInsights.timeGrainCount) {\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrainCount,\n            this.target.appInsights.timeGrainUnit\n          );\n        } else {\n          this.target.appInsights.timeGrainCount = this.target.appInsights.timeGrain;\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrain,\n            this.target.appInsights.timeGrainUnit\n          );\n        }\n      }\n    }\n\n    const oldAzureTimeGrains = (this.target.azureMonitor as any).timeGrains;\n    if (\n      oldAzureTimeGrains &&\n      oldAzureTimeGrains.length > 0 &&\n      (!this.target.azureMonitor.allowedTimeGrainsMs || this.target.azureMonitor.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.azureMonitor.allowedTimeGrainsMs = convertTimeGrainsToMs(oldAzureTimeGrains);\n    }\n\n    if (\n      this.target.appInsights.timeGrains &&\n      this.target.appInsights.timeGrains.length > 0 &&\n      (!this.target.appInsights.allowedTimeGrainsMs || this.target.appInsights.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.appInsights.allowedTimeGrainsMs = convertTimeGrainsToMs(this.target.appInsights.timeGrains);\n    }\n  }\n\n  migrateToFromTimes() {\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ');\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ');\n  }\n\n  async migrateToDefaultNamespace() {\n    if (\n      this.target.azureMonitor.metricNamespace &&\n      this.target.azureMonitor.metricNamespace !== this.defaultDropdownValue &&\n      this.target.azureMonitor.metricDefinition\n    ) {\n      return;\n    }\n\n    this.target.azureMonitor.metricNamespace = this.target.azureMonitor.metricDefinition;\n  }\n\n  migrateApplicationInsightsKeys(): void {\n    const appInsights = this.target.appInsights as any;\n\n    // Migrate old app insights data keys to match other datasources\n    const mappings = {\n      xaxis: 'timeColumn',\n      yaxis: 'valueColumn',\n      spliton: 'segmentColumn',\n      groupBy: 'dimension',\n      groupByOptions: 'dimensions',\n      filter: 'dimensionFilter',\n    } as { [old: string]: string };\n\n    for (const old in mappings) {\n      if (appInsights[old]) {\n        appInsights[mappings[old]] = appInsights[old];\n        delete appInsights[old];\n      }\n    }\n  }\n\n  migrateApplicationInsightsDimensions() {\n    const { appInsights } = this.target;\n\n    if (!appInsights.dimension) {\n      appInsights.dimension = [];\n    }\n\n    if (isString(appInsights.dimension)) {\n      appInsights.dimension = [appInsights.dimension as string];\n    }\n  }\n\n  replace = (variable: string) => {\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\n  };\n\n  onQueryTypeChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    // assert the type\n    if (!(this.datasource instanceof Datasource)) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subscriptions) => {\n      // We changed the format in the datasource for the new react stuff, so here we change it back\n      const subs = subscriptions.map((v) => ({\n        text: `${v.text} - ${v.value}`,\n        value: v.value,\n      }));\n\n      this.subscriptions = subs;\n      if (!this.target.subscription && this.target.queryType === 'Azure Monitor') {\n        this.target.subscription = this.datasource.azureMonitorDatasource.subscriptionId;\n      } else if (!this.target.subscription && this.target.queryType === 'Azure Log Analytics') {\n        this.target.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.target.subscription && this.subscriptions.length > 0) {\n        this.target.subscription = this.subscriptions[0].value;\n      }\n\n      if (!this.target.subscriptions) {\n        this.target.subscriptions = subscriptions.map((sub) => sub.value);\n      }\n\n      return this.subscriptions;\n    });\n  }\n\n  onSubscriptionChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  generateAutoUnits(timeGrain: string, timeGrains: Array<{ value: string }>) {\n    if (timeGrain === 'auto') {\n      return TimegrainConverter.findClosestTimeGrain(\n        '1m',\n        map(timeGrains, (o) => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n          '1m',\n          '5m',\n          '15m',\n          '30m',\n          '1h',\n          '6h',\n          '12h',\n          '1d',\n        ]\n      );\n    }\n\n    return '';\n  }\n\n  getAzureMonitorAutoInterval() {\n    return this.generateAutoUnits(this.target.azureMonitor.timeGrain, (this.target.azureMonitor as any).timeGrains);\n  }\n\n  getApplicationInsightAutoInterval() {\n    return this.generateAutoUnits(this.target.appInsights.timeGrain, this.target.appInsights.timeGrains);\n  }\n\n  azureMonitorAddDimensionFilter() {\n    this.target.azureMonitor.dimensionFilters.push({\n      dimension: '',\n      operator: 'eq',\n      filter: '',\n    });\n  }\n\n  azureMonitorRemoveDimensionFilter(index: number) {\n    this.target.azureMonitor.dimensionFilters.splice(index, 1);\n    this.refresh();\n  }\n\n  /* Azure Log Analytics */\n\n  getWorkspaces = () => {\n    return this.datasource.azureLogAnalyticsDatasource\n      .getWorkspaces(this.target.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n\n        if (list.length > 0 && !this.target.azureLogAnalytics.workspace) {\n          if (this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace) {\n            this.target.azureLogAnalytics.workspace = this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace;\n          }\n\n          if (!this.target.azureLogAnalytics.workspace) {\n            this.target.azureLogAnalytics.workspace = list[0].value;\n          }\n        }\n\n        return this.workspaces;\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.target.azureLogAnalytics.workspace);\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.azureLogAnalytics.query = nextQuery;\n  };\n\n  onLogAnalyticsQueryExecute = () => {\n    this.panelCtrl.refresh();\n  };\n\n  get templateVariables() {\n    return this.templateSrv.getVariables().map((t) => '$' + t.name);\n  }\n\n  getAppInsightsMetricNames() {\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAppInsightsColumns() {\n    return this.datasource.getAppInsightsColumns(this.target.refId);\n  }\n\n  onAppInsightsColumnChange() {\n    return this.refresh();\n  }\n\n  onAppInsightsMetricNameChange() {\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource\n      .getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\n      .then((aggData: { supportedAggTypes: string[]; supportedGroupBy: string[]; primaryAggType: string }) => {\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\n        this.target.appInsights.dimensions = aggData.supportedGroupBy;\n        this.target.appInsights.aggregation = aggData.primaryAggType;\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onInsightsAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.insightsAnalytics.query = nextQuery;\n  };\n\n  onQueryExecute = () => {\n    return this.refresh();\n  };\n\n  getAppInsightsQuerySchema = () => {\n    return this.datasource.appInsightsDatasource.getQuerySchema().catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  removeGroupBy = (index: number) => {\n    const { appInsights } = this.target;\n    appInsights.dimension.splice(index, 1);\n    this.refresh();\n  };\n\n  getAppInsightsGroupBySegments(query: any) {\n    const { appInsights } = this.target;\n\n    // HACK alert... there must be a better way!\n    if (this.dummyDiminsionString && this.dummyDiminsionString.length && '+' !== this.dummyDiminsionString) {\n      if (!appInsights.dimension) {\n        appInsights.dimension = [];\n      }\n      appInsights.dimension.push(this.dummyDiminsionString);\n      this.dummyDiminsionString = '+';\n      this.refresh();\n    }\n\n    // Return the list of dimensions stored on the query object from the last request :(\n    return map(appInsights.dimensions, (option: string) => {\n      return { text: option, value: option };\n    });\n  }\n\n  resetAppInsightsGroupBy() {\n    this.target.appInsights.dimension = 'none';\n    this.refresh();\n  }\n\n  updateTimeGrainType() {\n    if (this.target.appInsights.timeGrainType === 'specific') {\n      this.target.appInsights.timeGrainCount = '1';\n      this.target.appInsights.timeGrainUnit = 'minute';\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    } else {\n      this.target.appInsights.timeGrainCount = '';\n      this.target.appInsights.timeGrainUnit = '';\n    }\n  }\n\n  updateAppInsightsTimeGrain() {\n    if (this.target.appInsights.timeGrainUnit && this.target.appInsights.timeGrainCount) {\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    }\n    this.refresh();\n  }\n\n  /**\n   * Receives a full new query object from React and updates it into the Angular controller\n   */\n  handleNewQuery = (newQuery: AzureMonitorQuery) => {\n    Object.assign(this.target, newQuery);\n    this.refresh();\n  };\n}\n\n// Modifies the actual query object\nexport function migrateMetricsDimensionFilters(item: AzureMetricQuery) {\n  if (!item.dimensionFilters) {\n    item.dimensionFilters = [];\n  }\n  const oldDimension = (item as any).dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    item.dimensionFilters.push({\n      dimension: oldDimension,\n      operator: 'eq',\n      filter: (item as any).dimensionFilter,\n    });\n    delete (item as any).dimension;\n    delete (item as any).dimensionFilter;\n  }\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Button } from '@grafana/ui';\nimport { AzureAuthType, AzureCredentials } from '../types';\nimport { isCredentialsComplete } from '../credentials';\nconst { Select, Input } = LegacyForms;\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\nimport { getCredentials, updateCredentials } from '../credentials';\n\nconst azureClouds = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'germanyazuremonitor', label: 'Azure Germany' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n] as SelectableValue[];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const MonitorConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions, getSubscriptions } = props;\n  const credentials = useMemo(() => getCredentials(props.options), [props.options]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    updateOptions((options) => updateCredentials(options, credentials));\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Authentication</h3>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={azureClouds}\n        onCredentialsChange={onCredentialsChange}\n        getSubscriptions={getSubscriptions}\n      />\n    </>\n  );\n};\n\nexport default MonitorConfig;\n","import React, { FunctionComponent, useEffect, useMemo, useReducer, useState } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { InlineFormLabel, LegacyForms, Button, Alert } from '@grafana/ui';\nconst { Select, Switch } = LegacyForms;\nimport { AzureDataSourceSettings, AzureCredentials } from '../types';\nimport {\n  getCredentials,\n  getLogAnalyticsCredentials,\n  isCredentialsComplete,\n  updateLogAnalyticsCredentials,\n  updateLogAnalyticsSameAs,\n} from '../credentials';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  updateOptions: (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings) => void;\n  getSubscriptions: () => Promise<Array<SelectableValue<string>>>;\n  getWorkspaces: (subscriptionId: string) => Promise<Array<SelectableValue<string>>>;\n}\n\nexport const AnalyticsConfig: FunctionComponent<Props> = (props: Props) => {\n  const { updateOptions, getSubscriptions, getWorkspaces } = props;\n  const primaryCredentials = useMemo(() => getCredentials(props.options), [props.options]);\n  const logAnalyticsCredentials = useMemo(() => getLogAnalyticsCredentials(props.options), [props.options]);\n\n  const subscriptionId = logAnalyticsCredentials\n    ? logAnalyticsCredentials.defaultSubscriptionId\n    : primaryCredentials.defaultSubscriptionId;\n\n  // Only show a section for setting LogAnalytics credentials if they were set from before\n  // And the authType is supported\n  const [credentialsUsed, _] = useState(!!logAnalyticsCredentials);\n  const credentialsEnabled = credentialsUsed && primaryCredentials.authType === 'clientsecret';\n\n  const hasRequiredFields =\n    subscriptionId &&\n    (logAnalyticsCredentials\n      ? isCredentialsComplete(logAnalyticsCredentials)\n      : isCredentialsComplete(primaryCredentials));\n\n  const defaultWorkspace = props.options.jsonData.logAnalyticsDefaultWorkspace;\n\n  const [workspaces, setWorkspaces] = useState<SelectableValue[]>([]);\n  const [loadWorkspaces, onLoadWorkspaces] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!hasRequiredFields || !subscriptionId) {\n      updateWorkspaces([]);\n      return;\n    }\n    let canceled = false;\n    getWorkspaces(subscriptionId).then((result) => {\n      if (!canceled) {\n        updateWorkspaces(result);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Workspaces click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadWorkspaces, subscriptionId]);\n\n  const updateWorkspaces = (received: Array<SelectableValue<string>>) => {\n    setWorkspaces(received);\n    if (!defaultWorkspace && received.length > 0) {\n      // Setting the default workspace if workspaces received but no default workspace selected\n      updateOptions((options) => {\n        return {\n          ...options,\n          jsonData: {\n            ...options.jsonData,\n            logAnalyticsDefaultWorkspace: received[0].value,\n          },\n        };\n      });\n    } else if (defaultWorkspace) {\n      const found = received.find((opt) => opt.value === defaultWorkspace);\n      if (!found) {\n        // Unsetting the default workspace if it isn't found among the received workspaces\n        updateOptions((options) => {\n          return {\n            ...options,\n            jsonData: {\n              ...options.jsonData,\n              logAnalyticsDefaultWorkspace: undefined,\n            },\n          };\n        });\n      }\n    }\n  };\n\n  const [sameAsSwitched, setSameAsSwitched] = useState(false);\n\n  const onCredentialsChange = (updatedCredentials: AzureCredentials) => {\n    updateOptions((options) => updateLogAnalyticsCredentials(options, updatedCredentials));\n  };\n\n  const onLogAnalyticsSameAsChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const sameAs = event.currentTarget.checked;\n    updateOptions((options) => updateLogAnalyticsSameAs(options, sameAs));\n    setSameAsSwitched(true);\n  };\n\n  const onDefaultWorkspaceChange = (selected: SelectableValue<string>) => {\n    updateOptions((options) => {\n      return {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          logAnalyticsDefaultWorkspace: selected.value || '',\n        },\n      };\n    });\n  };\n\n  const tooltipAttribute = {\n    ...(!logAnalyticsCredentials && {\n      tooltip: 'Workspaces are pulled from default subscription selected above.',\n    }),\n  };\n\n  const showSameAsHelpMsg =\n    credentialsEnabled &&\n    sameAsSwitched &&\n    primaryCredentials.authType === 'clientsecret' &&\n    !primaryCredentials.clientSecret;\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Azure Monitor Logs</h3>\n      {credentialsEnabled && (\n        <>\n          <Switch\n            label=\"Same details as Azure Monitor API\"\n            checked={!logAnalyticsCredentials}\n            onChange={onLogAnalyticsSameAsChange}\n            {...tooltipAttribute}\n          />\n\n          {showSameAsHelpMsg && (\n            <div className=\"grafana-info-box m-t-2\">\n              <div className=\"alert-body\">\n                <p>Re-enter your Azure Monitor Client Secret to use this setting.</p>\n              </div>\n            </div>\n          )}\n\n          {logAnalyticsCredentials && (\n            <>\n              <Alert severity=\"info\" title=\"Deprecated\">\n                Using different credentials for Azure Monitor Logs is deprecated and will be removed in a future\n                version.\n                <br />\n                Create a different Data Source if you need to use different credentials.\n              </Alert>\n\n              <AzureCredentialsForm\n                managedIdentityEnabled={false}\n                credentials={logAnalyticsCredentials}\n                onCredentialsChange={onCredentialsChange}\n                getSubscriptions={getSubscriptions}\n              />\n            </>\n          )}\n        </>\n      )}\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-12\"\n              tooltip=\"Choose the default/preferred Workspace for Azure Log Analytics queries.\"\n            >\n              Default Workspace\n            </InlineFormLabel>\n            <div className=\"width-25\">\n              <Select\n                value={workspaces.find((opt) => opt.value === defaultWorkspace)}\n                options={workspaces}\n                onChange={onDefaultWorkspaceChange}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <div className=\"max-width-30 gf-form-inline\">\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                type=\"button\"\n                onClick={onLoadWorkspaces}\n                disabled={!hasRequiredFields}\n              >\n                Load Workspaces\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AnalyticsConfig;\n","import React, { PureComponent } from 'react';\nimport { InlineFormLabel, Button, LegacyForms, Alert } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport { AzureDataSourceSettings, AzureDataSourceJsonData, AzureDataSourceSecureJsonData } from '../types';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  onUpdateJsonDataOption: (\n    key: keyof AzureDataSourceJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onUpdateSecureJsonDataOption: (\n    key: keyof AzureDataSourceSecureJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onResetOptionKey: (key: string) => void;\n}\nexport class InsightsConfig extends PureComponent<Props> {\n  onAppInsightsResetApiKey = () => {\n    this.props.onResetOptionKey('appInsightsApiKey');\n  };\n\n  render() {\n    const { options, onUpdateJsonDataOption, onUpdateSecureJsonDataOption } = this.props;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Application Insights</h3>\n        <div className=\"gf-form-group\">\n          {options.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={this.onAppInsightsResetApiKey}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={options.secureJsonData!.appInsightsApiKey || ''}\n                    onChange={onUpdateSecureJsonDataOption('appInsightsApiKey')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={options.jsonData.appInsightsAppId || ''}\n                  onChange={onUpdateJsonDataOption('appInsightsAppId')}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Alert severity=\"info\" title=\"Application Insights credentials are deprecated\">\n          Configure using Azure AD App Registration above and update existing queries to use Metrics or Logs.\n        </Alert>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { PureComponent } from 'react';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n  updateDatasourcePluginResetOption,\n  updateDatasourcePluginSecureJsonDataOption,\n} from '@grafana/data';\nimport { MonitorConfig } from './MonitorConfig';\nimport { AnalyticsConfig } from './AnalyticsConfig';\nimport { getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { InsightsConfig } from './InsightsConfig';\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { getAzureCloud, isAppInsightsConfigured } from '../credentials';\nimport { getLogAnalyticsManagementApiRoute, getManagementApiRoute } from '../api/routes';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\nexport interface State {\n  unsaved: boolean;\n  appInsightsInitiallyConfigured: boolean;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n      appInsightsInitiallyConfigured: isAppInsightsConfigured(props.options),\n    };\n\n    if (this.props.options.id) {\n      updateDatasourcePluginOption(this.props, 'url', '/api/datasources/proxy/' + this.props.options.id);\n    }\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const cloud = getAzureCloud(this.props.options);\n    const route = getManagementApiRoute(cloud);\n    const url = `/${route}/subscriptions?api-version=2019-03-01`;\n\n    const result = await getBackendSrv().datasourceRequest({\n      url: this.props.options.url + url,\n      method: 'GET',\n    });\n\n    return ResponseParser.parseSubscriptionsForSelect(result);\n  };\n\n  private getLogAnalyticsSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const cloud = getAzureCloud(this.props.options);\n    const route = getLogAnalyticsManagementApiRoute(cloud);\n    const url = `/${route}/subscriptions?api-version=2019-03-01`;\n\n    const result = await getBackendSrv().datasourceRequest({\n      url: this.props.options.url + url,\n      method: 'GET',\n    });\n\n    return ResponseParser.parseSubscriptionsForSelect(result);\n  };\n\n  private getWorkspaces = async (subscriptionId: string): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const cloud = getAzureCloud(this.props.options);\n    const route = getLogAnalyticsManagementApiRoute(cloud);\n    const url = `/${route}/subscriptions/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n\n    const result = await getBackendSrv().datasourceRequest({\n      url: this.props.options.url + url,\n      method: 'GET',\n    });\n\n    return ResponseParser.parseWorkspacesForSelect(result);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private onUpdateJsonDataOption = (key: keyof AzureDataSourceJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    updateDatasourcePluginJsonDataOption(this.props, key, event.currentTarget.value);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private onUpdateSecureJsonDataOption = (key: keyof AzureDataSourceSecureJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    updateDatasourcePluginSecureJsonDataOption(this.props, key, event.currentTarget.value);\n  };\n\n  // TODO: Used only by InsightsConfig\n  private resetSecureKey = (key: keyof AzureDataSourceSecureJsonData) => {\n    updateDatasourcePluginResetOption(this.props, key);\n  };\n\n  render() {\n    const { options } = this.props;\n\n    return (\n      <>\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n\n        <AnalyticsConfig\n          options={options}\n          updateOptions={this.updateOptions}\n          getSubscriptions={this.getLogAnalyticsSubscriptions}\n          getWorkspaces={this.getWorkspaces}\n        />\n\n        {this.state.appInsightsInitiallyConfigured && (\n          <InsightsConfig\n            options={options}\n            onUpdateJsonDataOption={this.onUpdateJsonDataOption}\n            onUpdateSecureJsonDataOption={this.onUpdateSecureJsonDataOption}\n            onResetOptionKey={this.resetSecureKey}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nexport class AzureMonitorAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  datasource: any;\n  annotation: any;\n  workspaces: any[];\n  subscriptions: Array<{ text: string; value: string }>;\n\n  defaultQuery =\n    '<your table>\\n| where $__timeFilter() \\n| project TimeGenerated, Text=YourTitleColumn, Tags=\"tag1,tag2\"';\n\n  constructor(private templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.annotation.queryType = this.annotation.queryType || 'Azure Log Analytics';\n    this.annotation.rawQuery = this.annotation.rawQuery || this.defaultQuery;\n    this.initDropdowns();\n  }\n\n  async initDropdowns() {\n    await this.getSubscriptions();\n    await this.getWorkspaces();\n  }\n\n  async getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any[]) => {\n      this.subscriptions = subs;\n\n      if (!this.annotation.subscription && this.annotation.queryType === 'Azure Log Analytics') {\n        this.annotation.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.annotation.subscription && this.subscriptions.length > 0) {\n        this.annotation.subscription = this.subscriptions[0].value;\n      }\n    });\n  }\n\n  async getWorkspaces(bustCache?: boolean) {\n    if (!bustCache && this.workspaces && this.workspaces.length > 0) {\n      return this.workspaces;\n    }\n\n    return this.datasource\n      .getAzureLogAnalyticsWorkspaces(this.annotation.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.annotation.workspace) {\n          this.annotation.workspace = list[0].value;\n        }\n        return this.workspaces;\n      })\n      .catch(() => {});\n  }\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.annotation.workspace);\n      })\n      .catch(() => {});\n  };\n\n  onSubscriptionChange = () => {\n    this.getWorkspaces(true);\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.annotation.rawQuery = nextQuery;\n  };\n\n  get templateVariables() {\n    return this.templateSrv.getVariables().map((t: any) => '$' + t.name);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { AzureMonitorAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(AzureMonitorQueryCtrl)\n  .setAnnotationQueryCtrl(AzureMonitorAnnotationsQueryCtrl);\n"],"sourceRoot":""}